
00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d88  08002d88  00012d88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          0000496c  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000497c  2000497c  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018334  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000300a  00000000  00000000  00038374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ac64  00000000  00000000  0003b37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  00045fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001138  00000000  00000000  00046d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000738a  00000000  00000000  00047e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005e7b  00000000  00000000  0004f222  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005509d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000027b8  00000000  00000000  0005511c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d70 	.word	0x08002d70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002d70 	.word	0x08002d70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f81b 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f002 fb7a 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f002 fb56 	bl	8002bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200048f0 	.word	0x200048f0
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200048f0 	.word	0x200048f0

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfad      	iteet	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfb5      	itete	lt
 80005ae:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005c4:	2800      	cmp	r0, #0
 80005c6:	db08      	blt.n	80005da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c8:	0942      	lsrs	r2, r0, #5
 80005ca:	2301      	movs	r3, #1
 80005cc:	f000 001f 	and.w	r0, r0, #31
 80005d0:	fa03 f000 	lsl.w	r0, r3, r0
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_NVIC_EnableIRQ+0x18>)
 80005d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000798 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005ec:	4a68      	ldr	r2, [pc, #416]	; (8000790 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005ee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800079c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005f4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80005f6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f8:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80005fa:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005fc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80005fe:	42ac      	cmp	r4, r5
 8000600:	f040 80b0 	bne.w	8000764 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000604:	684c      	ldr	r4, [r1, #4]
 8000606:	f024 0c10 	bic.w	ip, r4, #16
 800060a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800060e:	2e01      	cmp	r6, #1
 8000610:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000614:	d812      	bhi.n	800063c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000616:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000618:	2603      	movs	r6, #3
 800061a:	fa06 f60e 	lsl.w	r6, r6, lr
 800061e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000622:	68ce      	ldr	r6, [r1, #12]
 8000624:	fa06 f60e 	lsl.w	r6, r6, lr
 8000628:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800062a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800062c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800062e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000632:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000636:	409e      	lsls	r6, r3
 8000638:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800063a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800063c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800063e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000640:	fa06 f60e 	lsl.w	r6, r6, lr
 8000644:	43f6      	mvns	r6, r6
 8000646:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800064a:	688f      	ldr	r7, [r1, #8]
 800064c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000650:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000654:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000658:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800065a:	d116      	bne.n	800068a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800065c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000660:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000664:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000668:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800066c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000670:	f04f 0c0f 	mov.w	ip, #15
 8000674:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000678:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800067c:	690f      	ldr	r7, [r1, #16]
 800067e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000682:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000686:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800068a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800068c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800068e:	f004 0703 	and.w	r7, r4, #3
 8000692:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000696:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800069a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800069c:	00e6      	lsls	r6, r4, #3
 800069e:	d561      	bpl.n	8000764 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f04f 0b00 	mov.w	fp, #0
 80006a4:	f8cd b00c 	str.w	fp, [sp, #12]
 80006a8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ac:	4e39      	ldr	r6, [pc, #228]	; (8000794 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006b2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006b6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006ba:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006be:	9703      	str	r7, [sp, #12]
 80006c0:	9f03      	ldr	r7, [sp, #12]
 80006c2:	f023 0703 	bic.w	r7, r3, #3
 80006c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006ca:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006ce:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006da:	f04f 0e0f 	mov.w	lr, #15
 80006de:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006e4:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e8:	d043      	beq.n	8000772 <HAL_GPIO_Init+0x192>
 80006ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006ee:	42b0      	cmp	r0, r6
 80006f0:	d041      	beq.n	8000776 <HAL_GPIO_Init+0x196>
 80006f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006f6:	42b0      	cmp	r0, r6
 80006f8:	d03f      	beq.n	800077a <HAL_GPIO_Init+0x19a>
 80006fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006fe:	42b0      	cmp	r0, r6
 8000700:	d03d      	beq.n	800077e <HAL_GPIO_Init+0x19e>
 8000702:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000706:	42b0      	cmp	r0, r6
 8000708:	d03b      	beq.n	8000782 <HAL_GPIO_Init+0x1a2>
 800070a:	4548      	cmp	r0, r9
 800070c:	d03b      	beq.n	8000786 <HAL_GPIO_Init+0x1a6>
 800070e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000712:	42b0      	cmp	r0, r6
 8000714:	d039      	beq.n	800078a <HAL_GPIO_Init+0x1aa>
 8000716:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800071a:	42b0      	cmp	r0, r6
 800071c:	bf14      	ite	ne
 800071e:	2608      	movne	r6, #8
 8000720:	2607      	moveq	r6, #7
 8000722:	fa06 f60c 	lsl.w	r6, r6, ip
 8000726:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800072a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800072c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800072e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000730:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000734:	bf0c      	ite	eq
 8000736:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000738:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800073a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800073c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800073e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000742:	bf0c      	ite	eq
 8000744:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000746:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000748:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800074a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000750:	bf0c      	ite	eq
 8000752:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000754:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000756:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000758:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800075a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800075c:	bf54      	ite	pl
 800075e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000760:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000762:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000764:	3301      	adds	r3, #1
 8000766:	2b10      	cmp	r3, #16
 8000768:	f47f af45 	bne.w	80005f6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800076c:	b005      	add	sp, #20
 800076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	465e      	mov	r6, fp
 8000774:	e7d5      	b.n	8000722 <HAL_GPIO_Init+0x142>
 8000776:	2601      	movs	r6, #1
 8000778:	e7d3      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800077a:	2602      	movs	r6, #2
 800077c:	e7d1      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800077e:	2603      	movs	r6, #3
 8000780:	e7cf      	b.n	8000722 <HAL_GPIO_Init+0x142>
 8000782:	2604      	movs	r6, #4
 8000784:	e7cd      	b.n	8000722 <HAL_GPIO_Init+0x142>
 8000786:	2605      	movs	r6, #5
 8000788:	e7cb      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800078a:	2606      	movs	r6, #6
 800078c:	e7c9      	b.n	8000722 <HAL_GPIO_Init+0x142>
 800078e:	bf00      	nop
 8000790:	40013c00 	.word	0x40013c00
 8000794:	40020000 	.word	0x40020000
 8000798:	40023800 	.word	0x40023800
 800079c:	40021400 	.word	0x40021400

080007a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a0:	b10a      	cbz	r2, 80007a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007a2:	6181      	str	r1, [r0, #24]
 80007a4:	4770      	bx	lr
 80007a6:	0409      	lsls	r1, r1, #16
 80007a8:	e7fb      	b.n	80007a2 <HAL_GPIO_WritePin+0x2>

080007aa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80007aa:	6943      	ldr	r3, [r0, #20]
 80007ac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007b0:	bf08      	it	eq
 80007b2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80007b4:	6181      	str	r1, [r0, #24]
 80007b6:	4770      	bx	lr

080007b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007bc:	4604      	mov	r4, r0
 80007be:	b908      	cbnz	r0, 80007c4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
 80007c2:	e03f      	b.n	8000844 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007c4:	6803      	ldr	r3, [r0, #0]
 80007c6:	07dd      	lsls	r5, r3, #31
 80007c8:	d410      	bmi.n	80007ec <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007ca:	6823      	ldr	r3, [r4, #0]
 80007cc:	0798      	lsls	r0, r3, #30
 80007ce:	d45a      	bmi.n	8000886 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	071a      	lsls	r2, r3, #28
 80007d4:	f100 809c 	bmi.w	8000910 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	075b      	lsls	r3, r3, #29
 80007dc:	f100 80ba 	bmi.w	8000954 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007e0:	69a0      	ldr	r0, [r4, #24]
 80007e2:	2800      	cmp	r0, #0
 80007e4:	f040 811b 	bne.w	8000a1e <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80007e8:	2000      	movs	r0, #0
 80007ea:	e02b      	b.n	8000844 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007ec:	4ba4      	ldr	r3, [pc, #656]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	f002 020c 	and.w	r2, r2, #12
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	d007      	beq.n	8000808 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007fe:	2a08      	cmp	r2, #8
 8000800:	d10a      	bne.n	8000818 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	0259      	lsls	r1, r3, #9
 8000806:	d507      	bpl.n	8000818 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000808:	4b9d      	ldr	r3, [pc, #628]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	039a      	lsls	r2, r3, #14
 800080e:	d5dc      	bpl.n	80007ca <HAL_RCC_OscConfig+0x12>
 8000810:	6863      	ldr	r3, [r4, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1d9      	bne.n	80007ca <HAL_RCC_OscConfig+0x12>
 8000816:	e7d3      	b.n	80007c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000818:	6863      	ldr	r3, [r4, #4]
 800081a:	4d99      	ldr	r5, [pc, #612]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 800081c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000820:	d113      	bne.n	800084a <HAL_RCC_OscConfig+0x92>
 8000822:	682b      	ldr	r3, [r5, #0]
 8000824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000828:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800082a:	f7ff fe7f 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082e:	4d94      	ldr	r5, [pc, #592]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000830:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000832:	682b      	ldr	r3, [r5, #0]
 8000834:	039b      	lsls	r3, r3, #14
 8000836:	d4c8      	bmi.n	80007ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000838:	f7ff fe78 	bl	800052c <HAL_GetTick>
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	2864      	cmp	r0, #100	; 0x64
 8000840:	d9f7      	bls.n	8000832 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000842:	2003      	movs	r0, #3
}
 8000844:	b002      	add	sp, #8
 8000846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800084e:	d104      	bne.n	800085a <HAL_RCC_OscConfig+0xa2>
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000856:	602b      	str	r3, [r5, #0]
 8000858:	e7e3      	b.n	8000822 <HAL_RCC_OscConfig+0x6a>
 800085a:	682a      	ldr	r2, [r5, #0]
 800085c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000860:	602a      	str	r2, [r5, #0]
 8000862:	682a      	ldr	r2, [r5, #0]
 8000864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000868:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1dd      	bne.n	800082a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800086e:	f7ff fe5d 	bl	800052c <HAL_GetTick>
 8000872:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	039f      	lsls	r7, r3, #14
 8000878:	d5a7      	bpl.n	80007ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800087a:	f7ff fe57 	bl	800052c <HAL_GetTick>
 800087e:	1b80      	subs	r0, r0, r6
 8000880:	2864      	cmp	r0, #100	; 0x64
 8000882:	d9f7      	bls.n	8000874 <HAL_RCC_OscConfig+0xbc>
 8000884:	e7dd      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000886:	4b7e      	ldr	r3, [pc, #504]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	f012 0f0c 	tst.w	r2, #12
 800088e:	d007      	beq.n	80008a0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000896:	2a08      	cmp	r2, #8
 8000898:	d111      	bne.n	80008be <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	025e      	lsls	r6, r3, #9
 800089e:	d40e      	bmi.n	80008be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a0:	4b77      	ldr	r3, [pc, #476]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	0795      	lsls	r5, r2, #30
 80008a6:	d502      	bpl.n	80008ae <HAL_RCC_OscConfig+0xf6>
 80008a8:	68e2      	ldr	r2, [r4, #12]
 80008aa:	2a01      	cmp	r2, #1
 80008ac:	d188      	bne.n	80007c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	6921      	ldr	r1, [r4, #16]
 80008b2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008bc:	e788      	b.n	80007d0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008be:	68e2      	ldr	r2, [r4, #12]
 80008c0:	4b70      	ldr	r3, [pc, #448]	; (8000a84 <HAL_RCC_OscConfig+0x2cc>)
 80008c2:	b1b2      	cbz	r2, 80008f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c8:	f7ff fe30 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008cc:	4d6c      	ldr	r5, [pc, #432]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	0798      	lsls	r0, r3, #30
 80008d4:	d507      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	6922      	ldr	r2, [r4, #16]
 80008da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008e2:	602b      	str	r3, [r5, #0]
 80008e4:	e774      	b.n	80007d0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fe21 	bl	800052c <HAL_GetTick>
 80008ea:	1b80      	subs	r0, r0, r6
 80008ec:	2802      	cmp	r0, #2
 80008ee:	d9ef      	bls.n	80008d0 <HAL_RCC_OscConfig+0x118>
 80008f0:	e7a7      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80008f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fe1a 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f8:	4d61      	ldr	r5, [pc, #388]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	0799      	lsls	r1, r3, #30
 8000900:	f57f af66 	bpl.w	80007d0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000904:	f7ff fe12 	bl	800052c <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2802      	cmp	r0, #2
 800090c:	d9f6      	bls.n	80008fc <HAL_RCC_OscConfig+0x144>
 800090e:	e798      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000910:	6962      	ldr	r2, [r4, #20]
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <HAL_RCC_OscConfig+0x2d0>)
 8000914:	b17a      	cbz	r2, 8000936 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800091a:	f7ff fe07 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800091e:	4d58      	ldr	r5, [pc, #352]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000920:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000922:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000924:	079f      	lsls	r7, r3, #30
 8000926:	f53f af57 	bmi.w	80007d8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800092a:	f7ff fdff 	bl	800052c <HAL_GetTick>
 800092e:	1b80      	subs	r0, r0, r6
 8000930:	2802      	cmp	r0, #2
 8000932:	d9f6      	bls.n	8000922 <HAL_RCC_OscConfig+0x16a>
 8000934:	e785      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000936:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000938:	f7ff fdf8 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800093c:	4d50      	ldr	r5, [pc, #320]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800093e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000940:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000942:	0798      	lsls	r0, r3, #30
 8000944:	f57f af48 	bpl.w	80007d8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000948:	f7ff fdf0 	bl	800052c <HAL_GetTick>
 800094c:	1b80      	subs	r0, r0, r6
 800094e:	2802      	cmp	r0, #2
 8000950:	d9f6      	bls.n	8000940 <HAL_RCC_OscConfig+0x188>
 8000952:	e776      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000954:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000958:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800095c:	d128      	bne.n	80009b0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	9201      	str	r2, [sp, #4]
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000972:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000974:	4d45      	ldr	r5, [pc, #276]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	05d9      	lsls	r1, r3, #23
 800097a:	d51b      	bpl.n	80009b4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	4d40      	ldr	r5, [pc, #256]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000980:	2b01      	cmp	r3, #1
 8000982:	d127      	bne.n	80009d4 <HAL_RCC_OscConfig+0x21c>
 8000984:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800098c:	f7ff fdce 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000990:	4d3b      	ldr	r5, [pc, #236]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000992:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000994:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000998:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800099a:	079b      	lsls	r3, r3, #30
 800099c:	d539      	bpl.n	8000a12 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800099e:	2e00      	cmp	r6, #0
 80009a0:	f43f af1e 	beq.w	80007e0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009a4:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 80009a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	e717      	b.n	80007e0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80009b0:	2600      	movs	r6, #0
 80009b2:	e7df      	b.n	8000974 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdb6 	bl	800052c <HAL_GetTick>
 80009c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	05da      	lsls	r2, r3, #23
 80009c6:	d4d9      	bmi.n	800097c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009c8:	f7ff fdb0 	bl	800052c <HAL_GetTick>
 80009cc:	1bc0      	subs	r0, r0, r7
 80009ce:	2802      	cmp	r0, #2
 80009d0:	d9f7      	bls.n	80009c2 <HAL_RCC_OscConfig+0x20a>
 80009d2:	e736      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d104      	bne.n	80009e2 <HAL_RCC_OscConfig+0x22a>
 80009d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	672b      	str	r3, [r5, #112]	; 0x70
 80009e0:	e7d0      	b.n	8000984 <HAL_RCC_OscConfig+0x1cc>
 80009e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009e4:	f022 0201 	bic.w	r2, r2, #1
 80009e8:	672a      	str	r2, [r5, #112]	; 0x70
 80009ea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009ec:	f022 0204 	bic.w	r2, r2, #4
 80009f0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1ca      	bne.n	800098c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80009f6:	f7ff fd99 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a02:	0798      	lsls	r0, r3, #30
 8000a04:	d5cb      	bpl.n	800099e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a06:	f7ff fd91 	bl	800052c <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	4540      	cmp	r0, r8
 8000a0e:	d9f7      	bls.n	8000a00 <HAL_RCC_OscConfig+0x248>
 8000a10:	e717      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a12:	f7ff fd8b 	bl	800052c <HAL_GetTick>
 8000a16:	1bc0      	subs	r0, r0, r7
 8000a18:	4540      	cmp	r0, r8
 8000a1a:	d9bd      	bls.n	8000998 <HAL_RCC_OscConfig+0x1e0>
 8000a1c:	e711      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a1e:	4d18      	ldr	r5, [pc, #96]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
 8000a20:	68ab      	ldr	r3, [r5, #8]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	d047      	beq.n	8000aba <HAL_RCC_OscConfig+0x302>
 8000a2a:	4e19      	ldr	r6, [pc, #100]	; (8000a90 <HAL_RCC_OscConfig+0x2d8>)
 8000a2c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a2e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a30:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a32:	d135      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a34:	f7ff fd7a 	bl	800052c <HAL_GetTick>
 8000a38:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	0199      	lsls	r1, r3, #6
 8000a3e:	d429      	bmi.n	8000a94 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a40:	6a22      	ldr	r2, [r4, #32]
 8000a42:	69e3      	ldr	r3, [r4, #28]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a48:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a56:	0852      	lsrs	r2, r2, #1
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a60:	2301      	movs	r3, #1
 8000a62:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a64:	f7ff fd62 	bl	800052c <HAL_GetTick>
 8000a68:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	019a      	lsls	r2, r3, #6
 8000a6e:	f53f aebb 	bmi.w	80007e8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a72:	f7ff fd5b 	bl	800052c <HAL_GetTick>
 8000a76:	1b40      	subs	r0, r0, r5
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d9f6      	bls.n	8000a6a <HAL_RCC_OscConfig+0x2b2>
 8000a7c:	e6e1      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	42470000 	.word	0x42470000
 8000a88:	42470e80 	.word	0x42470e80
 8000a8c:	40007000 	.word	0x40007000
 8000a90:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a94:	f7ff fd4a 	bl	800052c <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	2802      	cmp	r0, #2
 8000a9c:	d9cd      	bls.n	8000a3a <HAL_RCC_OscConfig+0x282>
 8000a9e:	e6d0      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fd44 	bl	800052c <HAL_GetTick>
 8000aa4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	019b      	lsls	r3, r3, #6
 8000aaa:	f57f ae9d 	bpl.w	80007e8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aae:	f7ff fd3d 	bl	800052c <HAL_GetTick>
 8000ab2:	1b00      	subs	r0, r0, r4
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d9f6      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x2ee>
 8000ab8:	e6c3      	b.n	8000842 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000aba:	2801      	cmp	r0, #1
 8000abc:	f43f aec2 	beq.w	8000844 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000ac0:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ac2:	69e3      	ldr	r3, [r4, #28]
 8000ac4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f47f ae79 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
 8000ace:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ad0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	f47f ae73 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ada:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ae0:	4003      	ands	r3, r0
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	f47f ae6c 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ae8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000aea:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000aee:	4293      	cmp	r3, r2
 8000af0:	f47f ae66 	bne.w	80007c0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000af4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000af6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000afa:	1ac0      	subs	r0, r0, r3
 8000afc:	bf18      	it	ne
 8000afe:	2001      	movne	r0, #1
 8000b00:	e6a0      	b.n	8000844 <HAL_RCC_OscConfig+0x8c>
 8000b02:	bf00      	nop

08000b04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b04:	4913      	ldr	r1, [pc, #76]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b08:	688b      	ldr	r3, [r1, #8]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d003      	beq.n	8000b1a <HAL_RCC_GetSysClockFreq+0x16>
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d003      	beq.n	8000b1e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b16:	4810      	ldr	r0, [pc, #64]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b18:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b1c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b1e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b20:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b22:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b24:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b28:	bf14      	ite	ne
 8000b2a:	480c      	ldrne	r0, [pc, #48]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2c:	480a      	ldreq	r0, [pc, #40]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b32:	bf18      	it	ne
 8000b34:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3a:	fba1 0100 	umull	r0, r1, r1, r0
 8000b3e:	f7ff fb47 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b52:	bd08      	pop	{r3, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	00f42400 	.word	0x00f42400
 8000b5c:	007a1200 	.word	0x007a1200

08000b60 <HAL_RCC_ClockConfig>:
{
 8000b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b64:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b66:	4604      	mov	r4, r0
 8000b68:	b910      	cbnz	r0, 8000b70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b70:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_RCC_ClockConfig+0x124>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	f002 020f 	and.w	r2, r2, #15
 8000b78:	428a      	cmp	r2, r1
 8000b7a:	d329      	bcc.n	8000bd0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b7c:	6821      	ldr	r1, [r4, #0]
 8000b7e:	078f      	lsls	r7, r1, #30
 8000b80:	d42e      	bmi.n	8000be0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b82:	07c8      	lsls	r0, r1, #31
 8000b84:	d441      	bmi.n	8000c0a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <HAL_RCC_ClockConfig+0x124>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f002 020f 	and.w	r2, r2, #15
 8000b8e:	4295      	cmp	r5, r2
 8000b90:	d367      	bcc.n	8000c62 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	0751      	lsls	r1, r2, #29
 8000b96:	d46d      	bmi.n	8000c74 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b98:	0713      	lsls	r3, r2, #28
 8000b9a:	d507      	bpl.n	8000bac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000b9e:	6921      	ldr	r1, [r4, #16]
 8000ba0:	6893      	ldr	r3, [r2, #8]
 8000ba2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ba6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000baa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bac:	f7ff ffaa 	bl	8000b04 <HAL_RCC_GetSysClockFreq>
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000bb2:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <HAL_RCC_ClockConfig+0x12c>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
 8000bbc:	40d8      	lsrs	r0, r3
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <HAL_RCC_ClockConfig+0x130>)
 8000bc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <HAL_RCC_ClockConfig+0x134>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	f002 f819 	bl	8002bfc <HAL_InitTick>
  return HAL_OK;
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd0:	b2ca      	uxtb	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	d1c5      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xa>
 8000bde:	e7cd      	b.n	8000b7c <HAL_RCC_ClockConfig+0x1c>
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000be6:	bf1e      	ittt	ne
 8000be8:	689a      	ldrne	r2, [r3, #8]
 8000bea:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bee:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bf2:	bf42      	ittt	mi
 8000bf4:	689a      	ldrmi	r2, [r3, #8]
 8000bf6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bfa:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	68a0      	ldr	r0, [r4, #8]
 8000c00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c04:	4302      	orrs	r2, r0
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	e7bb      	b.n	8000b82 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c0e:	2a01      	cmp	r2, #1
 8000c10:	d11d      	bne.n	8000c4e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c18:	d0a7      	beq.n	8000b6a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c1a:	4e1b      	ldr	r6, [pc, #108]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c1c:	68b3      	ldr	r3, [r6, #8]
 8000c1e:	f023 0303 	bic.w	r3, r3, #3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c26:	f7ff fc81 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c2a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c2e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c30:	68b3      	ldr	r3, [r6, #8]
 8000c32:	6862      	ldr	r2, [r4, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c3c:	d0a3      	beq.n	8000b86 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3e:	f7ff fc75 	bl	800052c <HAL_GetTick>
 8000c42:	1bc0      	subs	r0, r0, r7
 8000c44:	4540      	cmp	r0, r8
 8000c46:	d9f3      	bls.n	8000c30 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000c48:	2003      	movs	r0, #3
}
 8000c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c4e:	1e91      	subs	r1, r2, #2
 8000c50:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c52:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c54:	d802      	bhi.n	8000c5c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c5a:	e7dd      	b.n	8000c18 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5c:	f013 0f02 	tst.w	r3, #2
 8000c60:	e7da      	b.n	8000c18 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c62:	b2ea      	uxtb	r2, r5
 8000c64:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	429d      	cmp	r5, r3
 8000c6e:	f47f af7c 	bne.w	8000b6a <HAL_RCC_ClockConfig+0xa>
 8000c72:	e78e      	b.n	8000b92 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c74:	4904      	ldr	r1, [pc, #16]	; (8000c88 <HAL_RCC_ClockConfig+0x128>)
 8000c76:	68e0      	ldr	r0, [r4, #12]
 8000c78:	688b      	ldr	r3, [r1, #8]
 8000c7a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c7e:	4303      	orrs	r3, r0
 8000c80:	608b      	str	r3, [r1, #8]
 8000c82:	e789      	b.n	8000b98 <HAL_RCC_ClockConfig+0x38>
 8000c84:	40023c00 	.word	0x40023c00
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	08002da6 	.word	0x08002da6
 8000c90:	2000000c 	.word	0x2000000c
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ca6:	6810      	ldr	r0, [r2, #0]
}
 8000ca8:	40d8      	lsrs	r0, r3
 8000caa:	4770      	bx	lr
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	08002db6 	.word	0x08002db6
 8000cb4:	2000000c 	.word	0x2000000c

08000cb8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_RCC_GetClockConfig+0x34>)
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000ccc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000cd4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cde:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_RCC_GetClockConfig+0x38>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 030f 	and.w	r3, r3, #15
 8000ce8:	600b      	str	r3, [r1, #0]
 8000cea:	4770      	bx	lr
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_TIM_Base_MspInit>:
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cf6:	6803      	ldr	r3, [r0, #0]
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d06:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000d08:	bf1e      	ittt	ne
 8000d0a:	681a      	ldrne	r2, [r3, #0]
 8000d0c:	f042 0201 	orrne.w	r2, r2, #1
 8000d10:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000d12:	2000      	movs	r0, #0
 8000d14:	4770      	bx	lr

08000d16 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d16:	4770      	bx	lr

08000d18 <HAL_TIM_IC_CaptureCallback>:
 8000d18:	4770      	bx	lr

08000d1a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d1a:	4770      	bx	lr

08000d1c <HAL_TIM_TriggerCallback>:
 8000d1c:	4770      	bx	lr

08000d1e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d1e:	6803      	ldr	r3, [r0, #0]
 8000d20:	691a      	ldr	r2, [r3, #16]
 8000d22:	0791      	lsls	r1, r2, #30
{
 8000d24:	b510      	push	{r4, lr}
 8000d26:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d28:	d50e      	bpl.n	8000d48 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	0792      	lsls	r2, r2, #30
 8000d2e:	d50b      	bpl.n	8000d48 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d30:	f06f 0202 	mvn.w	r2, #2
 8000d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d36:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d38:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d3a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d3c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d3e:	d077      	beq.n	8000e30 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000d40:	f7ff ffea 	bl	8000d18 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d44:	2300      	movs	r3, #0
 8000d46:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	0750      	lsls	r0, r2, #29
 8000d4e:	d510      	bpl.n	8000d72 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	0751      	lsls	r1, r2, #29
 8000d54:	d50d      	bpl.n	8000d72 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d56:	f06f 0204 	mvn.w	r2, #4
 8000d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d5c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d5e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d60:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d64:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d66:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d68:	d068      	beq.n	8000e3c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d6a:	f7ff ffd5 	bl	8000d18 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	0712      	lsls	r2, r2, #28
 8000d78:	d50f      	bpl.n	8000d9a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	0710      	lsls	r0, r2, #28
 8000d7e:	d50c      	bpl.n	8000d9a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d80:	f06f 0208 	mvn.w	r2, #8
 8000d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d88:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d8a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d8c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d90:	d05a      	beq.n	8000e48 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d92:	f7ff ffc1 	bl	8000d18 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d96:	2300      	movs	r3, #0
 8000d98:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	06d2      	lsls	r2, r2, #27
 8000da0:	d510      	bpl.n	8000dc4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	06d0      	lsls	r0, r2, #27
 8000da6:	d50d      	bpl.n	8000dc4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000da8:	f06f 0210 	mvn.w	r2, #16
 8000dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000db0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000db2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000db6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000db8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dba:	d04b      	beq.n	8000e54 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dbc:	f7ff ffac 	bl	8000d18 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	07d1      	lsls	r1, r2, #31
 8000dca:	d508      	bpl.n	8000dde <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	07d2      	lsls	r2, r2, #31
 8000dd0:	d505      	bpl.n	8000dde <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000dd2:	f06f 0201 	mvn.w	r2, #1
 8000dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f001 fee3 	bl	8002ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	0610      	lsls	r0, r2, #24
 8000de4:	d508      	bpl.n	8000df8 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	0611      	lsls	r1, r2, #24
 8000dea:	d505      	bpl.n	8000df8 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000df2:	4620      	mov	r0, r4
 8000df4:	f000 f8b7 	bl	8000f66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	0652      	lsls	r2, r2, #25
 8000dfe:	d508      	bpl.n	8000e12 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	0650      	lsls	r0, r2, #25
 8000e04:	d505      	bpl.n	8000e12 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff ff85 	bl	8000d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	0691      	lsls	r1, r2, #26
 8000e18:	d522      	bpl.n	8000e60 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	0692      	lsls	r2, r2, #26
 8000e1e:	d51f      	bpl.n	8000e60 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e20:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000e24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e26:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000e2c:	f000 b89a 	b.w	8000f64 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e30:	f7ff ff71 	bl	8000d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e34:	4620      	mov	r0, r4
 8000e36:	f7ff ff70 	bl	8000d1a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e3a:	e783      	b.n	8000d44 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e3c:	f7ff ff6b 	bl	8000d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff ff6a 	bl	8000d1a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e46:	e792      	b.n	8000d6e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e48:	f7ff ff65 	bl	8000d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f7ff ff64 	bl	8000d1a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e52:	e7a0      	b.n	8000d96 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e54:	f7ff ff5f 	bl	8000d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff ff5e 	bl	8000d1a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e5e:	e7af      	b.n	8000dc0 <HAL_TIM_IRQHandler+0xa2>
 8000e60:	bd10      	pop	{r4, pc}
	...

08000e64 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e64:	4a30      	ldr	r2, [pc, #192]	; (8000f28 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000e66:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e68:	4290      	cmp	r0, r2
 8000e6a:	d012      	beq.n	8000e92 <TIM_Base_SetConfig+0x2e>
 8000e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e70:	d00f      	beq.n	8000e92 <TIM_Base_SetConfig+0x2e>
 8000e72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d00b      	beq.n	8000e92 <TIM_Base_SetConfig+0x2e>
 8000e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d007      	beq.n	8000e92 <TIM_Base_SetConfig+0x2e>
 8000e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d003      	beq.n	8000e92 <TIM_Base_SetConfig+0x2e>
 8000e8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e8e:	4290      	cmp	r0, r2
 8000e90:	d119      	bne.n	8000ec6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e98:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <TIM_Base_SetConfig+0xc4>)
 8000e9c:	4290      	cmp	r0, r2
 8000e9e:	d029      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000ea0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ea4:	d026      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000ea6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000eaa:	4290      	cmp	r0, r2
 8000eac:	d022      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb2:	4290      	cmp	r0, r2
 8000eb4:	d01e      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d01a      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000ebe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d016      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000ec6:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <TIM_Base_SetConfig+0xc8>)
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	d013      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d00f      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	d00b      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000edc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d007      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee8:	4290      	cmp	r0, r2
 8000eea:	d003      	beq.n	8000ef4 <TIM_Base_SetConfig+0x90>
 8000eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	d103      	bne.n	8000efc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ef4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000efa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000efc:	694a      	ldr	r2, [r1, #20]
 8000efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f02:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000f04:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f06:	688b      	ldr	r3, [r1, #8]
 8000f08:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000f0a:	680b      	ldr	r3, [r1, #0]
 8000f0c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <TIM_Base_SetConfig+0xc4>)
 8000f10:	4298      	cmp	r0, r3
 8000f12:	d003      	beq.n	8000f1c <TIM_Base_SetConfig+0xb8>
 8000f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	d101      	bne.n	8000f20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f1c:	690b      	ldr	r3, [r1, #16]
 8000f1e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f20:	2301      	movs	r3, #1
 8000f22:	6143      	str	r3, [r0, #20]
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	40014000 	.word	0x40014000

08000f30 <HAL_TIM_Base_Init>:
{
 8000f30:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000f32:	4604      	mov	r4, r0
 8000f34:	b1a0      	cbz	r0, 8000f60 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f3e:	b91b      	cbnz	r3, 8000f48 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f44:	f7ff fed6 	bl	8000cf4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f4e:	6820      	ldr	r0, [r4, #0]
 8000f50:	1d21      	adds	r1, r4, #4
 8000f52:	f7ff ff87 	bl	8000e64 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f60:	2001      	movs	r0, #1
}
 8000f62:	bd10      	pop	{r4, pc}

08000f64 <HAL_TIMEx_CommutCallback>:
 8000f64:	4770      	bx	lr

08000f66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f66:	4770      	bx	lr

08000f68 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000f68:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000f6c:	b113      	cbz	r3, 8000f74 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8000f6e:	f06f 0005 	mvn.w	r0, #5
 8000f72:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f74:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f8      	bne.n	8000f6e <osKernelInitialize+0x6>
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <osKernelInitialize+0x34>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d106      	bne.n	8000f92 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000f84:	f3ef 8311 	mrs	r3, BASEPRI
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f0      	bne.n	8000f6e <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8000f90:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d1fa      	bne.n	8000f8c <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	4770      	bx	lr
 8000f9c:	20000280 	.word	0x20000280

08000fa0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000fa0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000fa2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8000fa6:	b113      	cbz	r3, 8000fae <osKernelStart+0xe>
    stat = osErrorISR;
 8000fa8:	f06f 0005 	mvn.w	r0, #5
 8000fac:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fae:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d1f8      	bne.n	8000fa8 <osKernelStart+0x8>
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <osKernelStart+0x3c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2a02      	cmp	r2, #2
 8000fbc:	d106      	bne.n	8000fcc <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f0      	bne.n	8000fa8 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 8000fc6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8000fca:	bd10      	pop	{r4, pc}
    if (KernelState == osKernelReady) {
 8000fcc:	2a01      	cmp	r2, #1
 8000fce:	d1fa      	bne.n	8000fc6 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000fd4:	f001 f836 	bl	8002044 <vTaskStartScheduler>
      stat = osOK;
 8000fd8:	4620      	mov	r0, r4
 8000fda:	bd10      	pop	{r4, pc}
 8000fdc:	20000280 	.word	0x20000280

08000fe0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000fe6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000fe8:	460b      	mov	r3, r1
  hTask = NULL;
 8000fea:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000fec:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8000ff0:	bb72      	cbnz	r2, 8001050 <osThreadNew+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ff2:	f3ef 8210 	mrs	r2, PRIMASK
 8000ff6:	bb5a      	cbnz	r2, 8001050 <osThreadNew+0x70>
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <osThreadNew+0xbc>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	2a02      	cmp	r2, #2
 8000ffe:	d102      	bne.n	8001006 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001000:	f3ef 8211 	mrs	r2, BASEPRI
 8001004:	bb22      	cbnz	r2, 8001050 <osThreadNew+0x70>
 8001006:	b318      	cbz	r0, 8001050 <osThreadNew+0x70>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8001008:	2200      	movs	r2, #0
 800100a:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800100e:	2c00      	cmp	r4, #0
 8001010:	d03c      	beq.n	800108c <osThreadNew+0xac>
      if (attr->name != NULL) {
 8001012:	6821      	ldr	r1, [r4, #0]
 8001014:	b909      	cbnz	r1, 800101a <osThreadNew+0x3a>
    name  = &empty;
 8001016:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800101a:	69a5      	ldr	r5, [r4, #24]
 800101c:	2d00      	cmp	r5, #0
 800101e:	bf08      	it	eq
 8001020:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001022:	1e6a      	subs	r2, r5, #1
 8001024:	2a37      	cmp	r2, #55	; 0x37
 8001026:	462f      	mov	r7, r5
 8001028:	d835      	bhi.n	8001096 <osThreadNew+0xb6>
 800102a:	6862      	ldr	r2, [r4, #4]
 800102c:	07d2      	lsls	r2, r2, #31
 800102e:	d432      	bmi.n	8001096 <osThreadNew+0xb6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001030:	6966      	ldr	r6, [r4, #20]
 8001032:	b186      	cbz	r6, 8001056 <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001034:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001036:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800103a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800103e:	f1be 0f00 	cmp.w	lr, #0
 8001042:	d00a      	beq.n	800105a <osThreadNew+0x7a>
 8001044:	f1bc 0f53 	cmp.w	ip, #83	; 0x53
 8001048:	d902      	bls.n	8001050 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800104a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800104c:	b104      	cbz	r4, 8001050 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800104e:	b9ae      	cbnz	r6, 800107c <osThreadNew+0x9c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001050:	9805      	ldr	r0, [sp, #20]
}
 8001052:	b007      	add	sp, #28
 8001054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	e7ed      	b.n	8001036 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800105a:	f1bc 0f00 	cmp.w	ip, #0
 800105e:	d1f7      	bne.n	8001050 <osThreadNew+0x70>
      if (mem == 0) {
 8001060:	6924      	ldr	r4, [r4, #16]
 8001062:	2c00      	cmp	r4, #0
 8001064:	d1f4      	bne.n	8001050 <osThreadNew+0x70>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001066:	ac05      	add	r4, sp, #20
 8001068:	9401      	str	r4, [sp, #4]
 800106a:	9700      	str	r7, [sp, #0]
 800106c:	b292      	uxth	r2, r2
 800106e:	f000 ffbc 	bl	8001fea <xTaskCreate>
 8001072:	2801      	cmp	r0, #1
          hTask = NULL;
 8001074:	bf1c      	itt	ne
 8001076:	2300      	movne	r3, #0
 8001078:	9305      	strne	r3, [sp, #20]
 800107a:	e7e9      	b.n	8001050 <osThreadNew+0x70>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800107c:	f8cd e008 	str.w	lr, [sp, #8]
 8001080:	9401      	str	r4, [sp, #4]
 8001082:	9500      	str	r5, [sp, #0]
 8001084:	f000 ff7a 	bl	8001f7c <xTaskCreateStatic>
 8001088:	9005      	str	r0, [sp, #20]
 800108a:	e7e1      	b.n	8001050 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800108c:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800108e:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 8001090:	f10d 0113 	add.w	r1, sp, #19
 8001094:	e7e7      	b.n	8001066 <osThreadNew+0x86>
        return (NULL);
 8001096:	2000      	movs	r0, #0
 8001098:	e7db      	b.n	8001052 <osThreadNew+0x72>
 800109a:	bf00      	nop
 800109c:	20000280 	.word	0x20000280

080010a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80010a0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80010a2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80010a6:	b113      	cbz	r3, 80010ae <osDelay+0xe>
    stat = osErrorISR;
 80010a8:	f06f 0005 	mvn.w	r0, #5
 80010ac:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010ae:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f8      	bne.n	80010a8 <osDelay+0x8>
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <osDelay+0x30>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d103      	bne.n	80010c6 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80010be:	f3ef 8311 	mrs	r3, BASEPRI
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <osDelay+0x8>
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80010c6:	b110      	cbz	r0, 80010ce <osDelay+0x2e>
      vTaskDelay(ticks);
 80010c8:	f001 f912 	bl	80022f0 <vTaskDelay>
    stat = osOK;
 80010cc:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80010ce:	bd08      	pop	{r3, pc}
 80010d0:	20000280 	.word	0x20000280

080010d4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <vApplicationGetIdleTaskMemory+0x10>)
 80010d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <vApplicationGetIdleTaskMemory+0x14>)
 80010da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000022c 	.word	0x2000022c
 80010e8:	2000002c 	.word	0x2000002c

080010ec <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <vApplicationGetTimerTaskMemory+0x10>)
 80010ee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <vApplicationGetTimerTaskMemory+0x14>)
 80010f2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4770      	bx	lr
 80010fc:	20000684 	.word	0x20000684
 8001100:	20000284 	.word	0x20000284

08001104 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001104:	f100 0308 	add.w	r3, r0, #8
 8001108:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800110a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800110e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001110:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001112:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001114:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001116:	6003      	str	r3, [r0, #0]
 8001118:	4770      	bx	lr

0800111a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800111a:	2300      	movs	r3, #0
 800111c:	6103      	str	r3, [r0, #16]
 800111e:	4770      	bx	lr

08001120 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001120:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001122:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800112c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800112e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001130:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001132:	3301      	adds	r3, #1
 8001134:	6003      	str	r3, [r0, #0]
 8001136:	4770      	bx	lr

08001138 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001138:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800113a:	1c53      	adds	r3, r2, #1
{
 800113c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800113e:	d10a      	bne.n	8001156 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001140:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001146:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001148:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800114a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800114c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800114e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001150:	3301      	adds	r3, #1
 8001152:	6003      	str	r3, [r0, #0]
 8001154:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001156:	f100 0308 	add.w	r3, r0, #8
 800115a:	685c      	ldr	r4, [r3, #4]
 800115c:	6825      	ldr	r5, [r4, #0]
 800115e:	42aa      	cmp	r2, r5
 8001160:	d3ef      	bcc.n	8001142 <vListInsert+0xa>
 8001162:	4623      	mov	r3, r4
 8001164:	e7f9      	b.n	800115a <vListInsert+0x22>

08001166 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001166:	6841      	ldr	r1, [r0, #4]
 8001168:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800116a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800116c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800116e:	6882      	ldr	r2, [r0, #8]
 8001170:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001176:	bf08      	it	eq
 8001178:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800117a:	2200      	movs	r2, #0
 800117c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	3a01      	subs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001184:	6818      	ldr	r0, [r3, #0]
}
 8001186:	4770      	bx	lr

08001188 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001188:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <prvTaskExitError+0x3c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	d008      	beq.n	80011a8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800119a:	f383 8811 	msr	BASEPRI, r3
 800119e:	f3bf 8f6f 	isb	sy
 80011a2:	f3bf 8f4f 	dsb	sy
 80011a6:	e7fe      	b.n	80011a6 <prvTaskExitError+0x1e>
 80011a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ac:	f383 8811 	msr	BASEPRI, r3
 80011b0:	f3bf 8f6f 	isb	sy
 80011b4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80011b8:	9b01      	ldr	r3, [sp, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0fc      	beq.n	80011b8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80011be:	b002      	add	sp, #8
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <prvPortStartFirstTask+0x24>)
 80011ca:	6800      	ldr	r0, [r0, #0]
 80011cc:	6800      	ldr	r0, [r0, #0]
 80011ce:	f380 8808 	msr	MSP, r0
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	f380 8814 	msr	CONTROL, r0
 80011da:	b662      	cpsie	i
 80011dc:	b661      	cpsie	f
 80011de:	f3bf 8f4f 	dsb	sy
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	df00      	svc	0
 80011e8:	bf00      	nop
 80011ea:	0000      	.short	0x0000
 80011ec:	e000ed08 	.word	0xe000ed08

080011f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80011f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001200 <vPortEnableVFP+0x10>
 80011f4:	6801      	ldr	r1, [r0, #0]
 80011f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80011fa:	6001      	str	r1, [r0, #0]
 80011fc:	4770      	bx	lr
 80011fe:	0000      	.short	0x0000
 8001200:	e000ed88 	.word	0xe000ed88

08001204 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001208:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <pxPortInitialiseStack+0x28>)
 800120e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001212:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001216:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800121a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800121e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001222:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001226:	3844      	subs	r0, #68	; 0x44
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	08001189 	.word	0x08001189

08001230 <SVC_Handler>:
	__asm volatile (
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <pxCurrentTCBConst2>)
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	6808      	ldr	r0, [r1, #0]
 8001236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123a:	f380 8809 	msr	PSP, r0
 800123e:	f3bf 8f6f 	isb	sy
 8001242:	f04f 0000 	mov.w	r0, #0
 8001246:	f380 8811 	msr	BASEPRI, r0
 800124a:	4770      	bx	lr
 800124c:	f3af 8000 	nop.w

08001250 <pxCurrentTCBConst2>:
 8001250:	200042f8 	.word	0x200042f8

08001254 <vPortEnterCritical>:
 8001254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001258:	f383 8811 	msr	BASEPRI, r3
 800125c:	f3bf 8f6f 	isb	sy
 8001260:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <vPortEnterCritical+0x3c>)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800126a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800126c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800126e:	d10d      	bne.n	800128c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <vPortEnterCritical+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001278:	d008      	beq.n	800128c <vPortEnterCritical+0x38>
 800127a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127e:	f383 8811 	msr	BASEPRI, r3
 8001282:	f3bf 8f6f 	isb	sy
 8001286:	f3bf 8f4f 	dsb	sy
 800128a:	e7fe      	b.n	800128a <vPortEnterCritical+0x36>
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	e000ed04 	.word	0xe000ed04

08001298 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <vPortExitCritical+0x24>)
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	b943      	cbnz	r3, 80012b0 <vPortExitCritical+0x18>
 800129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a2:	f383 8811 	msr	BASEPRI, r3
 80012a6:	f3bf 8f6f 	isb	sy
 80012aa:	f3bf 8f4f 	dsb	sy
 80012ae:	e7fe      	b.n	80012ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80012b0:	3b01      	subs	r3, #1
 80012b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80012b4:	b90b      	cbnz	r3, 80012ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80012b6:	f383 8811 	msr	BASEPRI, r3
 80012ba:	4770      	bx	lr
 80012bc:	20000008 	.word	0x20000008

080012c0 <PendSV_Handler>:
	__asm volatile
 80012c0:	f3ef 8009 	mrs	r0, PSP
 80012c4:	f3bf 8f6f 	isb	sy
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <pxCurrentTCBConst>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f01e 0f10 	tst.w	lr, #16
 80012d0:	bf08      	it	eq
 80012d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80012d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012da:	6010      	str	r0, [r2, #0]
 80012dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80012e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012e4:	f380 8811 	msr	BASEPRI, r0
 80012e8:	f3bf 8f4f 	dsb	sy
 80012ec:	f3bf 8f6f 	isb	sy
 80012f0:	f001 f822 	bl	8002338 <vTaskSwitchContext>
 80012f4:	f04f 0000 	mov.w	r0, #0
 80012f8:	f380 8811 	msr	BASEPRI, r0
 80012fc:	bc09      	pop	{r0, r3}
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	6808      	ldr	r0, [r1, #0]
 8001302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001306:	f01e 0f10 	tst.w	lr, #16
 800130a:	bf08      	it	eq
 800130c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001310:	f380 8809 	msr	PSP, r0
 8001314:	f3bf 8f6f 	isb	sy
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w

08001320 <pxCurrentTCBConst>:
 8001320:	200042f8 	.word	0x200042f8

08001324 <SysTick_Handler>:
{
 8001324:	b508      	push	{r3, lr}
	__asm volatile
 8001326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132a:	f383 8811 	msr	BASEPRI, r3
 800132e:	f3bf 8f6f 	isb	sy
 8001332:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001336:	f000 fed7 	bl	80020e8 <xTaskIncrementTick>
 800133a:	b118      	cbz	r0, 8001344 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <SysTick_Handler+0x28>)
 800133e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001342:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001344:	2300      	movs	r3, #0
 8001346:	f383 8811 	msr	BASEPRI, r3
 800134a:	bd08      	pop	{r3, pc}
 800134c:	e000ed04 	.word	0xe000ed04

08001350 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001350:	4a08      	ldr	r2, [pc, #32]	; (8001374 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001352:	4909      	ldr	r1, [pc, #36]	; (8001378 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001358:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <vPortSetupTimerInterrupt+0x2c>)
 800135c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	4906      	ldr	r1, [pc, #24]	; (8001380 <vPortSetupTimerInterrupt+0x30>)
 8001368:	3b01      	subs	r3, #1
 800136a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800136c:	2307      	movs	r3, #7
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010
 8001378:	e000e018 	.word	0xe000e018
 800137c:	2000000c 	.word	0x2000000c
 8001380:	e000e014 	.word	0xe000e014

08001384 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001384:	4b39      	ldr	r3, [pc, #228]	; (800146c <xPortStartScheduler+0xe8>)
 8001386:	4a3a      	ldr	r2, [pc, #232]	; (8001470 <xPortStartScheduler+0xec>)
{
 8001388:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	4291      	cmp	r1, r2
 800138e:	d108      	bne.n	80013a2 <xPortStartScheduler+0x1e>
	__asm volatile
 8001390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	e7fe      	b.n	80013a0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <xPortStartScheduler+0xf0>)
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d108      	bne.n	80013bc <xPortStartScheduler+0x38>
 80013aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ae:	f383 8811 	msr	BASEPRI, r3
 80013b2:	f3bf 8f6f 	isb	sy
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	e7fe      	b.n	80013ba <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <xPortStartScheduler+0xf4>)
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80013c8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80013ca:	4a2c      	ldr	r2, [pc, #176]	; (800147c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80013d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80013d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <xPortStartScheduler+0xfc>)
 80013de:	2207      	movs	r2, #7
 80013e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80013e2:	2100      	movs	r1, #0
 80013e4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80013e8:	0600      	lsls	r0, r0, #24
 80013ea:	f102 34ff 	add.w	r4, r2, #4294967295
 80013ee:	d40d      	bmi.n	800140c <xPortStartScheduler+0x88>
 80013f0:	b101      	cbz	r1, 80013f4 <xPortStartScheduler+0x70>
 80013f2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2a03      	cmp	r2, #3
 80013f8:	d011      	beq.n	800141e <xPortStartScheduler+0x9a>
 80013fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fe:	f383 8811 	msr	BASEPRI, r3
 8001402:	f3bf 8f6f 	isb	sy
 8001406:	f3bf 8f4f 	dsb	sy
 800140a:	e7fe      	b.n	800140a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800140c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001410:	0052      	lsls	r2, r2, #1
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	f88d 2003 	strb.w	r2, [sp, #3]
 8001418:	2101      	movs	r1, #1
 800141a:	4622      	mov	r2, r4
 800141c:	e7e2      	b.n	80013e4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800141e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001420:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001424:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001426:	9b01      	ldr	r3, [sp, #4]
 8001428:	4a13      	ldr	r2, [pc, #76]	; (8001478 <xPortStartScheduler+0xf4>)
 800142a:	b2db      	uxtb	r3, r3
 800142c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <xPortStartScheduler+0x100>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001436:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800143e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001440:	f7ff ff86 	bl	8001350 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <xPortStartScheduler+0x104>)
 8001446:	2400      	movs	r4, #0
 8001448:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800144a:	f7ff fed1 	bl	80011f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <xPortStartScheduler+0x108>)
 8001450:	6813      	ldr	r3, [r2, #0]
 8001452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001456:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001458:	f7ff feb6 	bl	80011c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800145c:	f000 ff6c 	bl	8002338 <vTaskSwitchContext>
	prvTaskExitError();
 8001460:	f7ff fe92 	bl	8001188 <prvTaskExitError>
}
 8001464:	4620      	mov	r0, r4
 8001466:	b002      	add	sp, #8
 8001468:	bd10      	pop	{r4, pc}
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	410fc271 	.word	0x410fc271
 8001474:	410fc270 	.word	0x410fc270
 8001478:	e000e400 	.word	0xe000e400
 800147c:	200006d8 	.word	0x200006d8
 8001480:	200006dc 	.word	0x200006dc
 8001484:	e000ed20 	.word	0xe000ed20
 8001488:	20000008 	.word	0x20000008
 800148c:	e000ef34 	.word	0xe000ef34

08001490 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001490:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d90e      	bls.n	80014b6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001498:	4a10      	ldr	r2, [pc, #64]	; (80014dc <vPortValidateInterruptPriority+0x4c>)
 800149a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800149c:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <vPortValidateInterruptPriority+0x50>)
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d908      	bls.n	80014b6 <vPortValidateInterruptPriority+0x26>
 80014a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	e7fe      	b.n	80014b4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <vPortValidateInterruptPriority+0x54>)
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <vPortValidateInterruptPriority+0x58>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d908      	bls.n	80014d8 <vPortValidateInterruptPriority+0x48>
 80014c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
 80014d6:	e7fe      	b.n	80014d6 <vPortValidateInterruptPriority+0x46>
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e3f0 	.word	0xe000e3f0
 80014e0:	200006d8 	.word	0x200006d8
 80014e4:	e000ed0c 	.word	0xe000ed0c
 80014e8:	200006dc 	.word	0x200006dc

080014ec <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014ec:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <prvInsertBlockIntoFreeList+0x40>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4282      	cmp	r2, r0
 80014f4:	d318      	bcc.n	8001528 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014f6:	685c      	ldr	r4, [r3, #4]
 80014f8:	1919      	adds	r1, r3, r4
 80014fa:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014fc:	bf01      	itttt	eq
 80014fe:	6841      	ldreq	r1, [r0, #4]
 8001500:	4618      	moveq	r0, r3
 8001502:	1909      	addeq	r1, r1, r4
 8001504:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001506:	6844      	ldr	r4, [r0, #4]
 8001508:	1901      	adds	r1, r0, r4
 800150a:	428a      	cmp	r2, r1
 800150c:	d107      	bne.n	800151e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <prvInsertBlockIntoFreeList+0x44>)
 8001510:	6809      	ldr	r1, [r1, #0]
 8001512:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001514:	bf1f      	itttt	ne
 8001516:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001518:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800151a:	1909      	addne	r1, r1, r4
 800151c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800151e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001520:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001522:	bf18      	it	ne
 8001524:	6018      	strne	r0, [r3, #0]
 8001526:	bd10      	pop	{r4, pc}
 8001528:	4613      	mov	r3, r2
 800152a:	e7e1      	b.n	80014f0 <prvInsertBlockIntoFreeList+0x4>
 800152c:	200042f0 	.word	0x200042f0
 8001530:	200006e0 	.word	0x200006e0

08001534 <pvPortMalloc>:
{
 8001534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001538:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800153a:	f000 fdc7 	bl	80020cc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800153e:	493e      	ldr	r1, [pc, #248]	; (8001638 <pvPortMalloc+0x104>)
 8001540:	4d3e      	ldr	r5, [pc, #248]	; (800163c <pvPortMalloc+0x108>)
 8001542:	680b      	ldr	r3, [r1, #0]
 8001544:	bb0b      	cbnz	r3, 800158a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001546:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001548:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800154a:	bf1f      	itttt	ne
 800154c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800154e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001552:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001556:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001558:	bf14      	ite	ne
 800155a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800155c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001560:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001562:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001564:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001568:	4e36      	ldr	r6, [pc, #216]	; (8001644 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800156a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800156c:	2000      	movs	r0, #0
 800156e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001570:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001572:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001574:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001576:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001578:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800157c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800157e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <pvPortMalloc+0x118>)
 8001582:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001588:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800158a:	682f      	ldr	r7, [r5, #0]
 800158c:	4227      	tst	r7, r4
 800158e:	d116      	bne.n	80015be <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001590:	2c00      	cmp	r4, #0
 8001592:	d041      	beq.n	8001618 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001594:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001598:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800159a:	bf1c      	itt	ne
 800159c:	f023 0307 	bicne.w	r3, r3, #7
 80015a0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80015a2:	b163      	cbz	r3, 80015be <pvPortMalloc+0x8a>
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <pvPortMalloc+0x118>)
 80015a6:	6816      	ldr	r6, [r2, #0]
 80015a8:	42b3      	cmp	r3, r6
 80015aa:	4690      	mov	r8, r2
 80015ac:	d807      	bhi.n	80015be <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80015ae:	4a25      	ldr	r2, [pc, #148]	; (8001644 <pvPortMalloc+0x110>)
 80015b0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015b2:	6868      	ldr	r0, [r5, #4]
 80015b4:	4283      	cmp	r3, r0
 80015b6:	d804      	bhi.n	80015c2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80015b8:	6809      	ldr	r1, [r1, #0]
 80015ba:	428d      	cmp	r5, r1
 80015bc:	d107      	bne.n	80015ce <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80015be:	2400      	movs	r4, #0
 80015c0:	e02a      	b.n	8001618 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015c2:	682c      	ldr	r4, [r5, #0]
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	d0f7      	beq.n	80015b8 <pvPortMalloc+0x84>
 80015c8:	462a      	mov	r2, r5
 80015ca:	4625      	mov	r5, r4
 80015cc:	e7f1      	b.n	80015b2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015ce:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015d0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015d2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015d4:	1ac2      	subs	r2, r0, r3
 80015d6:	2a10      	cmp	r2, #16
 80015d8:	d90f      	bls.n	80015fa <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015da:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015dc:	0741      	lsls	r1, r0, #29
 80015de:	d008      	beq.n	80015f2 <pvPortMalloc+0xbe>
 80015e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	e7fe      	b.n	80015f0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015f2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80015f4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015f6:	f7ff ff79 	bl	80014ec <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015fa:	4913      	ldr	r1, [pc, #76]	; (8001648 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015fc:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015fe:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001600:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001602:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001604:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001606:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800160a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800160e:	bf38      	it	cc
 8001610:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001612:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001614:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001616:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001618:	f000 fdf6 	bl	8002208 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800161c:	0763      	lsls	r3, r4, #29
 800161e:	d008      	beq.n	8001632 <pvPortMalloc+0xfe>
 8001620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	e7fe      	b.n	8001630 <pvPortMalloc+0xfc>
}
 8001632:	4620      	mov	r0, r4
 8001634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001638:	200006e0 	.word	0x200006e0
 800163c:	200042e4 	.word	0x200042e4
 8001640:	200006e4 	.word	0x200006e4
 8001644:	200042f0 	.word	0x200042f0
 8001648:	200042ec 	.word	0x200042ec
 800164c:	200042e8 	.word	0x200042e8

08001650 <vPortFree>:
{
 8001650:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001652:	4604      	mov	r4, r0
 8001654:	b370      	cbz	r0, 80016b4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <vPortFree+0x68>)
 8001658:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4213      	tst	r3, r2
 8001660:	d108      	bne.n	8001674 <vPortFree+0x24>
 8001662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001666:	f383 8811 	msr	BASEPRI, r3
 800166a:	f3bf 8f6f 	isb	sy
 800166e:	f3bf 8f4f 	dsb	sy
 8001672:	e7fe      	b.n	8001672 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001674:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001678:	b141      	cbz	r1, 800168c <vPortFree+0x3c>
 800167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	e7fe      	b.n	800168a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800168c:	ea23 0302 	bic.w	r3, r3, r2
 8001690:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001694:	f000 fd1a 	bl	80020cc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001698:	4a08      	ldr	r2, [pc, #32]	; (80016bc <vPortFree+0x6c>)
 800169a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800169e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016a0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016a4:	440b      	add	r3, r1
 80016a6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016a8:	f7ff ff20 	bl	80014ec <prvInsertBlockIntoFreeList>
}
 80016ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80016b0:	f000 bdaa 	b.w	8002208 <xTaskResumeAll>
 80016b4:	bd10      	pop	{r4, pc}
 80016b6:	bf00      	nop
 80016b8:	200042e4 	.word	0x200042e4
 80016bc:	200042e8 	.word	0x200042e8

080016c0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80016c0:	b510      	push	{r4, lr}
 80016c2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80016c4:	f7ff fdc6 	bl	8001254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80016c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80016ca:	f7ff fde5 	bl	8001298 <vPortExitCritical>

	return xReturn;
}
 80016ce:	fab4 f084 	clz	r0, r4
 80016d2:	0940      	lsrs	r0, r0, #5
 80016d4:	bd10      	pop	{r4, pc}

080016d6 <prvCopyDataToQueue>:
{
 80016d6:	b570      	push	{r4, r5, r6, lr}
 80016d8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016da:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016dc:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80016de:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016e0:	b942      	cbnz	r2, 80016f4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016e2:	6805      	ldr	r5, [r0, #0]
 80016e4:	b99d      	cbnz	r5, 800170e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80016e6:	6840      	ldr	r0, [r0, #4]
 80016e8:	f000 ff38 	bl	800255c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80016ec:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016ee:	3601      	adds	r6, #1
 80016f0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80016f4:	b96d      	cbnz	r5, 8001712 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80016f6:	6880      	ldr	r0, [r0, #8]
 80016f8:	f001 fb26 	bl	8002d48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80016fc:	68a3      	ldr	r3, [r4, #8]
 80016fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001700:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001702:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001704:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001706:	4293      	cmp	r3, r2
 8001708:	d301      	bcc.n	800170e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800170e:	2000      	movs	r0, #0
 8001710:	e7ed      	b.n	80016ee <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001712:	68c0      	ldr	r0, [r0, #12]
 8001714:	f001 fb18 	bl	8002d48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800171a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800171c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800171e:	425b      	negs	r3, r3
 8001720:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001722:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001724:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001726:	bf3e      	ittt	cc
 8001728:	6862      	ldrcc	r2, [r4, #4]
 800172a:	189b      	addcc	r3, r3, r2
 800172c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800172e:	2d02      	cmp	r5, #2
 8001730:	d1ed      	bne.n	800170e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001732:	b10e      	cbz	r6, 8001738 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001734:	3e01      	subs	r6, #1
 8001736:	e7ea      	b.n	800170e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001738:	4630      	mov	r0, r6
 800173a:	e7d8      	b.n	80016ee <prvCopyDataToQueue+0x18>

0800173c <prvCopyDataFromQueue>:
{
 800173c:	4603      	mov	r3, r0
 800173e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001742:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001744:	b162      	cbz	r2, 8001760 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001746:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001748:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800174a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800174c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800174e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001750:	bf24      	itt	cs
 8001752:	6819      	ldrcs	r1, [r3, #0]
 8001754:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001756:	68d9      	ldr	r1, [r3, #12]
}
 8001758:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800175c:	f001 baf4 	b.w	8002d48 <memcpy>
}
 8001760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001764:	4770      	bx	lr

08001766 <prvUnlockQueue>:
{
 8001766:	b570      	push	{r4, r5, r6, lr}
 8001768:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800176a:	f7ff fd73 	bl	8001254 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800176e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001772:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001776:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001778:	2d00      	cmp	r5, #0
 800177a:	dc14      	bgt.n	80017a6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800177c:	23ff      	movs	r3, #255	; 0xff
 800177e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001782:	f7ff fd89 	bl	8001298 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001786:	f7ff fd65 	bl	8001254 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800178a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800178e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001792:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001794:	2d00      	cmp	r5, #0
 8001796:	dc12      	bgt.n	80017be <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8001798:	23ff      	movs	r3, #255	; 0xff
 800179a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800179e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80017a2:	f7ff bd79 	b.w	8001298 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0e7      	beq.n	800177c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017ac:	4630      	mov	r0, r6
 80017ae:	f000 fe37 	bl	8002420 <xTaskRemoveFromEventList>
 80017b2:	b108      	cbz	r0, 80017b8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80017b4:	f000 febc 	bl	8002530 <vTaskMissedYield>
 80017b8:	3d01      	subs	r5, #1
 80017ba:	b26d      	sxtb	r5, r5
 80017bc:	e7dc      	b.n	8001778 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017be:	6923      	ldr	r3, [r4, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0e9      	beq.n	8001798 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017c4:	4630      	mov	r0, r6
 80017c6:	f000 fe2b 	bl	8002420 <xTaskRemoveFromEventList>
 80017ca:	b108      	cbz	r0, 80017d0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80017cc:	f000 feb0 	bl	8002530 <vTaskMissedYield>
 80017d0:	3d01      	subs	r5, #1
 80017d2:	b26d      	sxtb	r5, r5
 80017d4:	e7de      	b.n	8001794 <prvUnlockQueue+0x2e>
	...

080017d8 <xQueueGenericReset>:
{
 80017d8:	b538      	push	{r3, r4, r5, lr}
 80017da:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80017dc:	4604      	mov	r4, r0
 80017de:	b940      	cbnz	r0, 80017f2 <xQueueGenericReset+0x1a>
 80017e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e4:	f383 8811 	msr	BASEPRI, r3
 80017e8:	f3bf 8f6f 	isb	sy
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	e7fe      	b.n	80017f0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80017f2:	f7ff fd2f 	bl	8001254 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80017f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80017f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017fa:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017fc:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80017fe:	4343      	muls	r3, r0
 8001800:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001802:	1a1b      	subs	r3, r3, r0
 8001804:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001806:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001808:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800180a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800180c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800180e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001810:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001818:	b995      	cbnz	r5, 8001840 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800181a:	6923      	ldr	r3, [r4, #16]
 800181c:	b163      	cbz	r3, 8001838 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800181e:	f104 0010 	add.w	r0, r4, #16
 8001822:	f000 fdfd 	bl	8002420 <xTaskRemoveFromEventList>
 8001826:	b138      	cbz	r0, 8001838 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <xQueueGenericReset+0x7c>)
 800182a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001838:	f7ff fd2e 	bl	8001298 <vPortExitCritical>
}
 800183c:	2001      	movs	r0, #1
 800183e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001840:	f104 0010 	add.w	r0, r4, #16
 8001844:	f7ff fc5e 	bl	8001104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001848:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800184c:	f7ff fc5a 	bl	8001104 <vListInitialise>
 8001850:	e7f2      	b.n	8001838 <xQueueGenericReset+0x60>
 8001852:	bf00      	nop
 8001854:	e000ed04 	.word	0xe000ed04

08001858 <xQueueGenericCreateStatic>:
	{
 8001858:	b513      	push	{r0, r1, r4, lr}
 800185a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800185c:	b940      	cbnz	r0, 8001870 <xQueueGenericCreateStatic+0x18>
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	e7fe      	b.n	800186e <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8001870:	b943      	cbnz	r3, 8001884 <xQueueGenericCreateStatic+0x2c>
 8001872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001876:	f383 8811 	msr	BASEPRI, r3
 800187a:	f3bf 8f6f 	isb	sy
 800187e:	f3bf 8f4f 	dsb	sy
 8001882:	e7fe      	b.n	8001882 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001884:	b14a      	cbz	r2, 800189a <xQueueGenericCreateStatic+0x42>
 8001886:	b9d9      	cbnz	r1, 80018c0 <xQueueGenericCreateStatic+0x68>
 8001888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188c:	f383 8811 	msr	BASEPRI, r3
 8001890:	f3bf 8f6f 	isb	sy
 8001894:	f3bf 8f4f 	dsb	sy
 8001898:	e7fe      	b.n	8001898 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800189a:	b189      	cbz	r1, 80018c0 <xQueueGenericCreateStatic+0x68>
 800189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	e7fe      	b.n	80018ac <xQueueGenericCreateStatic+0x54>
 80018ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b2:	f383 8811 	msr	BASEPRI, r3
 80018b6:	f3bf 8f6f 	isb	sy
 80018ba:	f3bf 8f4f 	dsb	sy
 80018be:	e7fe      	b.n	80018be <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80018c0:	2348      	movs	r3, #72	; 0x48
 80018c2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80018c4:	9b01      	ldr	r3, [sp, #4]
 80018c6:	2b48      	cmp	r3, #72	; 0x48
 80018c8:	d1f1      	bne.n	80018ae <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80018ca:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80018cc:	2900      	cmp	r1, #0
 80018ce:	bf08      	it	eq
 80018d0:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 80018d2:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80018d4:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80018d6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80018da:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff ff7a 	bl	80017d8 <xQueueGenericReset>
	}
 80018e4:	4620      	mov	r0, r4
 80018e6:	b002      	add	sp, #8
 80018e8:	bd10      	pop	{r4, pc}
	...

080018ec <xQueueGenericSend>:
{
 80018ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018f0:	4689      	mov	r9, r1
 80018f2:	9201      	str	r2, [sp, #4]
 80018f4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80018f6:	4604      	mov	r4, r0
 80018f8:	b940      	cbnz	r0, 800190c <xQueueGenericSend+0x20>
 80018fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fe:	f383 8811 	msr	BASEPRI, r3
 8001902:	f3bf 8f6f 	isb	sy
 8001906:	f3bf 8f4f 	dsb	sy
 800190a:	e7fe      	b.n	800190a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800190c:	2900      	cmp	r1, #0
 800190e:	f040 8088 	bne.w	8001a22 <xQueueGenericSend+0x136>
 8001912:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8084 	beq.w	8001a22 <xQueueGenericSend+0x136>
 800191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191e:	f383 8811 	msr	BASEPRI, r3
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	f3bf 8f4f 	dsb	sy
 800192a:	e7fe      	b.n	800192a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800192c:	9e01      	ldr	r6, [sp, #4]
 800192e:	2e00      	cmp	r6, #0
 8001930:	f000 8082 	beq.w	8001a38 <xQueueGenericSend+0x14c>
 8001934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001938:	f383 8811 	msr	BASEPRI, r3
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f3bf 8f4f 	dsb	sy
 8001944:	e7fe      	b.n	8001944 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001946:	9d01      	ldr	r5, [sp, #4]
 8001948:	b91d      	cbnz	r5, 8001952 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800194a:	f7ff fca5 	bl	8001298 <vPortExitCritical>
			return errQUEUE_FULL;
 800194e:	2000      	movs	r0, #0
 8001950:	e058      	b.n	8001a04 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001952:	b916      	cbnz	r6, 800195a <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001954:	a802      	add	r0, sp, #8
 8001956:	f000 fda3 	bl	80024a0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800195a:	f7ff fc9d 	bl	8001298 <vPortExitCritical>
		vTaskSuspendAll();
 800195e:	f000 fbb5 	bl	80020cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001962:	f7ff fc77 	bl	8001254 <vPortEnterCritical>
 8001966:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	bf08      	it	eq
 800196e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001972:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	bf08      	it	eq
 800197a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800197e:	f7ff fc8b 	bl	8001298 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001982:	a901      	add	r1, sp, #4
 8001984:	a802      	add	r0, sp, #8
 8001986:	f000 fd97 	bl	80024b8 <xTaskCheckForTimeOut>
 800198a:	2800      	cmp	r0, #0
 800198c:	d143      	bne.n	8001a16 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800198e:	f7ff fc61 	bl	8001254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001992:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001994:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001996:	f7ff fc7f 	bl	8001298 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800199a:	42ae      	cmp	r6, r5
 800199c:	d135      	bne.n	8001a0a <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800199e:	9901      	ldr	r1, [sp, #4]
 80019a0:	f104 0010 	add.w	r0, r4, #16
 80019a4:	f000 fd04 	bl	80023b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fedc 	bl	8001766 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80019ae:	f000 fc2b 	bl	8002208 <xTaskResumeAll>
 80019b2:	b938      	cbnz	r0, 80019c4 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80019b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019b8:	f8ca 3000 	str.w	r3, [sl]
 80019bc:	f3bf 8f4f 	dsb	sy
 80019c0:	f3bf 8f6f 	isb	sy
 80019c4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80019c6:	f7ff fc45 	bl	8001254 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80019ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d301      	bcc.n	80019d6 <xQueueGenericSend+0xea>
 80019d2:	2f02      	cmp	r7, #2
 80019d4:	d1b7      	bne.n	8001946 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019d6:	463a      	mov	r2, r7
 80019d8:	4649      	mov	r1, r9
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff fe7b 	bl	80016d6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019e2:	b11b      	cbz	r3, 80019ec <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019e8:	f000 fd1a 	bl	8002420 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80019ec:	b138      	cbz	r0, 80019fe <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <xQueueGenericSend+0x168>)
 80019f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80019fe:	f7ff fc4b 	bl	8001298 <vPortExitCritical>
				return pdPASS;
 8001a02:	2001      	movs	r0, #1
}
 8001a04:	b004      	add	sp, #16
 8001a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff feab 	bl	8001766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a10:	f000 fbfa 	bl	8002208 <xTaskResumeAll>
 8001a14:	e7d6      	b.n	80019c4 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff fea5 	bl	8001766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a1c:	f000 fbf4 	bl	8002208 <xTaskResumeAll>
 8001a20:	e795      	b.n	800194e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a22:	2f02      	cmp	r7, #2
 8001a24:	d102      	bne.n	8001a2c <xQueueGenericSend+0x140>
 8001a26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d10a      	bne.n	8001a42 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a2c:	f000 fd86 	bl	800253c <xTaskGetSchedulerState>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	f43f af7b 	beq.w	800192c <xQueueGenericSend+0x40>
 8001a36:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001a38:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001a3c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001a54 <xQueueGenericSend+0x168>
 8001a40:	e7c1      	b.n	80019c6 <xQueueGenericSend+0xda>
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	e7fe      	b.n	8001a52 <xQueueGenericSend+0x166>
 8001a54:	e000ed04 	.word	0xe000ed04

08001a58 <xQueueGenericSendFromISR>:
{
 8001a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a5c:	4688      	mov	r8, r1
 8001a5e:	4691      	mov	r9, r2
 8001a60:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001a62:	4604      	mov	r4, r0
 8001a64:	b940      	cbnz	r0, 8001a78 <xQueueGenericSendFromISR+0x20>
 8001a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	e7fe      	b.n	8001a76 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a78:	bb09      	cbnz	r1, 8001abe <xQueueGenericSendFromISR+0x66>
 8001a7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a7c:	b1fb      	cbz	r3, 8001abe <xQueueGenericSendFromISR+0x66>
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	e7fe      	b.n	8001a8e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a94:	f000 fcc4 	bl	8002420 <xTaskRemoveFromEventList>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d034      	beq.n	8001b06 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8001a9c:	f1b9 0f00 	cmp.w	r9, #0
 8001aa0:	d031      	beq.n	8001b06 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8001aa8:	f386 8811 	msr	BASEPRI, r6
}
 8001aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ab0:	3501      	adds	r5, #1
 8001ab2:	b26d      	sxtb	r5, r5
 8001ab4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8001ab8:	e025      	b.n	8001b06 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8001aba:	2000      	movs	r0, #0
 8001abc:	e7f4      	b.n	8001aa8 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001abe:	2f02      	cmp	r7, #2
 8001ac0:	d102      	bne.n	8001ac8 <xQueueGenericSendFromISR+0x70>
 8001ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d120      	bne.n	8001b0a <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ac8:	f7ff fce2 	bl	8001490 <vPortValidateInterruptPriority>
	__asm volatile
 8001acc:	f3ef 8611 	mrs	r6, BASEPRI
 8001ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad4:	f383 8811 	msr	BASEPRI, r3
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ae0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d301      	bcc.n	8001aec <xQueueGenericSendFromISR+0x94>
 8001ae8:	2f02      	cmp	r7, #2
 8001aea:	d1e6      	bne.n	8001aba <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001aec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001af0:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8001af2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001af4:	4641      	mov	r1, r8
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7ff fded 	bl	80016d6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001afc:	1c6b      	adds	r3, r5, #1
 8001afe:	d1d7      	bne.n	8001ab0 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1c4      	bne.n	8001a90 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8001b06:	2001      	movs	r0, #1
 8001b08:	e7ce      	b.n	8001aa8 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	e7fe      	b.n	8001b1a <xQueueGenericSendFromISR+0xc2>

08001b1c <xQueueReceive>:
{
 8001b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b20:	b085      	sub	sp, #20
 8001b22:	4688      	mov	r8, r1
 8001b24:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001b26:	4604      	mov	r4, r0
 8001b28:	b940      	cbnz	r0, 8001b3c <xQueueReceive+0x20>
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	e7fe      	b.n	8001b3a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b3c:	2900      	cmp	r1, #0
 8001b3e:	f040 8086 	bne.w	8001c4e <xQueueReceive+0x132>
 8001b42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8082 	beq.w	8001c4e <xQueueReceive+0x132>
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	e7fe      	b.n	8001b5a <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b5c:	9e01      	ldr	r6, [sp, #4]
 8001b5e:	2e00      	cmp	r6, #0
 8001b60:	d07a      	beq.n	8001c58 <xQueueReceive+0x13c>
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	e7fe      	b.n	8001b72 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b74:	9d01      	ldr	r5, [sp, #4]
 8001b76:	b91d      	cbnz	r5, 8001b80 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8001b78:	f7ff fb8e 	bl	8001298 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e052      	b.n	8001c26 <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8001b80:	b916      	cbnz	r6, 8001b88 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b82:	a802      	add	r0, sp, #8
 8001b84:	f000 fc8c 	bl	80024a0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001b88:	f7ff fb86 	bl	8001298 <vPortExitCritical>
		vTaskSuspendAll();
 8001b8c:	f000 fa9e 	bl	80020cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b90:	f7ff fb60 	bl	8001254 <vPortEnterCritical>
 8001b94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	bf08      	it	eq
 8001b9c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001ba0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001ba4:	2bff      	cmp	r3, #255	; 0xff
 8001ba6:	bf08      	it	eq
 8001ba8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001bac:	f7ff fb74 	bl	8001298 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bb0:	a901      	add	r1, sp, #4
 8001bb2:	a802      	add	r0, sp, #8
 8001bb4:	f000 fc80 	bl	80024b8 <xTaskCheckForTimeOut>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d13d      	bne.n	8001c38 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff fd7f 	bl	80016c0 <prvIsQueueEmpty>
 8001bc2:	b398      	cbz	r0, 8001c2c <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001bc4:	9901      	ldr	r1, [sp, #4]
 8001bc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001bca:	f000 fbf1 	bl	80023b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff fdc9 	bl	8001766 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001bd4:	f000 fb18 	bl	8002208 <xTaskResumeAll>
 8001bd8:	b938      	cbnz	r0, 8001bea <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8001bda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bde:	f8c9 3000 	str.w	r3, [r9]
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001bec:	f7ff fb32 	bl	8001254 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bf0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001bf2:	2d00      	cmp	r5, #0
 8001bf4:	d0be      	beq.n	8001b74 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bf6:	4641      	mov	r1, r8
 8001bf8:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001bfa:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bfc:	f7ff fd9e 	bl	800173c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c00:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c02:	6923      	ldr	r3, [r4, #16]
 8001c04:	b163      	cbz	r3, 8001c20 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c06:	f104 0010 	add.w	r0, r4, #16
 8001c0a:	f000 fc09 	bl	8002420 <xTaskRemoveFromEventList>
 8001c0e:	b138      	cbz	r0, 8001c20 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <xQueueReceive+0x144>)
 8001c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001c20:	f7ff fb3a 	bl	8001298 <vPortExitCritical>
				return pdPASS;
 8001c24:	2001      	movs	r0, #1
}
 8001c26:	b005      	add	sp, #20
 8001c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff fd9a 	bl	8001766 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c32:	f000 fae9 	bl	8002208 <xTaskResumeAll>
 8001c36:	e7d8      	b.n	8001bea <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7ff fd94 	bl	8001766 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c3e:	f000 fae3 	bl	8002208 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fd3c 	bl	80016c0 <prvIsQueueEmpty>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d0ce      	beq.n	8001bea <xQueueReceive+0xce>
 8001c4c:	e796      	b.n	8001b7c <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c4e:	f000 fc75 	bl	800253c <xTaskGetSchedulerState>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d082      	beq.n	8001b5c <xQueueReceive+0x40>
 8001c56:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001c58:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001c5a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8001c60 <xQueueReceive+0x144>
 8001c5e:	e7c5      	b.n	8001bec <xQueueReceive+0xd0>
 8001c60:	e000ed04 	.word	0xe000ed04

08001c64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c64:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c68:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c6a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8001c6e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8001c72:	b91d      	cbnz	r5, 8001c7c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001c78:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001c7a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d1f3      	bne.n	8001c6a <vQueueAddToRegistry+0x6>
 8001c82:	bd30      	pop	{r4, r5, pc}
 8001c84:	200048f4 	.word	0x200048f4

08001c88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	460d      	mov	r5, r1
 8001c8e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001c90:	f7ff fae0 	bl	8001254 <vPortEnterCritical>
 8001c94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c98:	2bff      	cmp	r3, #255	; 0xff
 8001c9a:	bf04      	itt	eq
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8001ca2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	bf04      	itt	eq
 8001caa:	2300      	moveq	r3, #0
 8001cac:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8001cb0:	f7ff faf2 	bl	8001298 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001cb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cb6:	b92b      	cbnz	r3, 8001cc4 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001cb8:	4632      	mov	r2, r6
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cc0:	f000 fb90 	bl	80023e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001cc4:	4620      	mov	r0, r4
	}
 8001cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8001cca:	f7ff bd4c 	b.w	8001766 <prvUnlockQueue>
	...

08001cd0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd4:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001cd6:	f7ff fabd 	bl	8001254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001cdc:	4c2d      	ldr	r4, [pc, #180]	; (8001d94 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4f2d      	ldr	r7, [pc, #180]	; (8001d98 <prvAddNewTaskToReadyList+0xc8>)
 8001ce2:	3201      	adds	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001ce6:	6825      	ldr	r5, [r4, #0]
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d146      	bne.n	8001d7a <prvAddNewTaskToReadyList+0xaa>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001cec:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d11d      	bne.n	8001d30 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cf4:	1978      	adds	r0, r7, r5
 8001cf6:	3514      	adds	r5, #20
 8001cf8:	f7ff fa04 	bl	8001104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cfc:	f5b5 6f8c 	cmp.w	r5, #1120	; 0x460
 8001d00:	d1f8      	bne.n	8001cf4 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001d02:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001dc4 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001d06:	4d25      	ldr	r5, [pc, #148]	; (8001d9c <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001d08:	4640      	mov	r0, r8
 8001d0a:	f7ff f9fb 	bl	8001104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f7ff f9f8 	bl	8001104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d14:	4822      	ldr	r0, [pc, #136]	; (8001da0 <prvAddNewTaskToReadyList+0xd0>)
 8001d16:	f7ff f9f5 	bl	8001104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001d1a:	4822      	ldr	r0, [pc, #136]	; (8001da4 <prvAddNewTaskToReadyList+0xd4>)
 8001d1c:	f7ff f9f2 	bl	8001104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001d20:	4821      	ldr	r0, [pc, #132]	; (8001da8 <prvAddNewTaskToReadyList+0xd8>)
 8001d22:	f7ff f9ef 	bl	8001104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <prvAddNewTaskToReadyList+0xdc>)
 8001d28:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <prvAddNewTaskToReadyList+0xe0>)
 8001d2e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <prvAddNewTaskToReadyList+0xe4>)
 8001d32:	6813      	ldr	r3, [r2, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <prvAddNewTaskToReadyList+0xe8>)
 8001d3a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001d3c:	6811      	ldr	r1, [r2, #0]
 8001d3e:	2014      	movs	r0, #20
 8001d40:	428b      	cmp	r3, r1
 8001d42:	fb00 7003 	mla	r0, r0, r3, r7
 8001d46:	f106 0104 	add.w	r1, r6, #4
 8001d4a:	bf88      	it	hi
 8001d4c:	6013      	strhi	r3, [r2, #0]
 8001d4e:	f7ff f9e7 	bl	8001120 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001d52:	f7ff faa1 	bl	8001298 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <prvAddNewTaskToReadyList+0xec>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b163      	cbz	r3, 8001d76 <prvAddNewTaskToReadyList+0xa6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d207      	bcs.n	8001d76 <prvAddNewTaskToReadyList+0xa6>
			taskYIELD_IF_USING_PREEMPTION();
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <prvAddNewTaskToReadyList+0xf0>)
 8001d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <prvAddNewTaskToReadyList+0xec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1d6      	bne.n	8001d30 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001d88:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001d8a:	bf98      	it	ls
 8001d8c:	6026      	strls	r6, [r4, #0]
 8001d8e:	e7cf      	b.n	8001d30 <prvAddNewTaskToReadyList+0x60>
 8001d90:	20004764 	.word	0x20004764
 8001d94:	200042f8 	.word	0x200042f8
 8001d98:	20004304 	.word	0x20004304
 8001d9c:	20004790 	.word	0x20004790
 8001da0:	200047ac 	.word	0x200047ac
 8001da4:	200047d8 	.word	0x200047d8
 8001da8:	200047c4 	.word	0x200047c4
 8001dac:	200042fc 	.word	0x200042fc
 8001db0:	20004300 	.word	0x20004300
 8001db4:	20004774 	.word	0x20004774
 8001db8:	20004778 	.word	0x20004778
 8001dbc:	200047c0 	.word	0x200047c0
 8001dc0:	e000ed04 	.word	0xe000ed04
 8001dc4:	2000477c 	.word	0x2000477c

08001dc8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <prvResetNextTaskUnblockTime+0x1c>)
 8001dca:	6813      	ldr	r3, [r2, #0]
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <prvResetNextTaskUnblockTime+0x20>)
 8001dd0:	b919      	cbnz	r1, 8001dda <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001dd2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dde:	68d2      	ldr	r2, [r2, #12]
 8001de0:	6852      	ldr	r2, [r2, #4]
 8001de2:	e7f8      	b.n	8001dd6 <prvResetNextTaskUnblockTime+0xe>
 8001de4:	200042fc 	.word	0x200042fc
 8001de8:	200047a4 	.word	0x200047a4

08001dec <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001df0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001df2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001df6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001df8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001dfc:	3a01      	subs	r2, #1
 8001dfe:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001e02:	469a      	mov	sl, r3
 8001e04:	4681      	mov	r9, r0
 8001e06:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e08:	f026 0607 	bic.w	r6, r6, #7
 8001e0c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001e10:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e12:	7858      	ldrb	r0, [r3, #1]
 8001e14:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001e18:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001e1c:	b108      	cbz	r0, 8001e22 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e1e:	428b      	cmp	r3, r1
 8001e20:	d1f7      	bne.n	8001e12 <prvInitialiseNewTask.isra.2+0x26>
 8001e22:	9d08      	ldr	r5, [sp, #32]
 8001e24:	2d37      	cmp	r5, #55	; 0x37
 8001e26:	bf28      	it	cs
 8001e28:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e2a:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001e2c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001e2e:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e30:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e32:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001e36:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e38:	f7ff f96f 	bl	800111a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e3c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e40:	f104 0018 	add.w	r0, r4, #24
 8001e44:	f7ff f969 	bl	800111a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001e48:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e4a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e4c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e4e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e50:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e54:	4652      	mov	r2, sl
 8001e56:	4649      	mov	r1, r9
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f7ff f9d3 	bl	8001204 <pxPortInitialiseStack>
 8001e5e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001e60:	f1b8 0f00 	cmp.w	r8, #0
 8001e64:	d001      	beq.n	8001e6a <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e66:	f8c8 4000 	str.w	r4, [r8]
 8001e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001e6e <prvDeleteTCB>:
	{
 8001e6e:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e70:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001e74:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e76:	b93b      	cbnz	r3, 8001e88 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001e78:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001e7a:	f7ff fbe9 	bl	8001650 <vPortFree>
				vPortFree( pxTCB );
 8001e7e:	4620      	mov	r0, r4
	}
 8001e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001e84:	f7ff bbe4 	b.w	8001650 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d0f9      	beq.n	8001e80 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d008      	beq.n	8001ea2 <prvDeleteTCB+0x34>
 8001e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	e7fe      	b.n	8001ea0 <prvDeleteTCB+0x32>
 8001ea2:	bd10      	pop	{r4, pc}

08001ea4 <prvIdleTask>:
{
 8001ea4:	b580      	push	{r7, lr}
				taskYIELD();
 8001ea6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001f04 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001eaa:	4f12      	ldr	r7, [pc, #72]	; (8001ef4 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001eac:	4c12      	ldr	r4, [pc, #72]	; (8001ef8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001eae:	4d13      	ldr	r5, [pc, #76]	; (8001efc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	b963      	cbnz	r3, 8001ece <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <prvIdleTask+0x5c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d9f8      	bls.n	8001eae <prvIdleTask+0xa>
				taskYIELD();
 8001ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ec0:	f8c8 3000 	str.w	r3, [r8]
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	e7ee      	b.n	8001eac <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001ece:	f7ff f9c1 	bl	8001254 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ed6:	1d30      	adds	r0, r6, #4
 8001ed8:	f7ff f945 	bl	8001166 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001ee8:	f7ff f9d6 	bl	8001298 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001eec:	4630      	mov	r0, r6
 8001eee:	f7ff ffbe 	bl	8001e6e <prvDeleteTCB>
 8001ef2:	e7dd      	b.n	8001eb0 <prvIdleTask+0xc>
 8001ef4:	200047d8 	.word	0x200047d8
 8001ef8:	20004768 	.word	0x20004768
 8001efc:	20004764 	.word	0x20004764
 8001f00:	20004304 	.word	0x20004304
 8001f04:	e000ed04 	.word	0xe000ed04

08001f08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f0c:	4d16      	ldr	r5, [pc, #88]	; (8001f68 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8001f0e:	681e      	ldr	r6, [r3, #0]
{
 8001f10:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f12:	6828      	ldr	r0, [r5, #0]
 8001f14:	3004      	adds	r0, #4
{
 8001f16:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f18:	f7ff f925 	bl	8001166 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f1c:	1c63      	adds	r3, r4, #1
 8001f1e:	462b      	mov	r3, r5
 8001f20:	d107      	bne.n	8001f32 <prvAddCurrentTaskToDelayedList+0x2a>
 8001f22:	b137      	cbz	r7, 8001f32 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f24:	6829      	ldr	r1, [r5, #0]
 8001f26:	4811      	ldr	r0, [pc, #68]	; (8001f6c <prvAddCurrentTaskToDelayedList+0x64>)
 8001f28:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f2e:	f7ff b8f7 	b.w	8001120 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f32:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f34:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001f36:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f38:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001f3a:	d907      	bls.n	8001f4c <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <prvAddCurrentTaskToDelayedList+0x68>)
 8001f3e:	6810      	ldr	r0, [r2, #0]
 8001f40:	6819      	ldr	r1, [r3, #0]
}
 8001f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f46:	3104      	adds	r1, #4
 8001f48:	f7ff b8f6 	b.w	8001138 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <prvAddCurrentTaskToDelayedList+0x6c>)
 8001f4e:	6810      	ldr	r0, [r2, #0]
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	3104      	adds	r1, #4
 8001f54:	f7ff f8f0 	bl	8001138 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <prvAddCurrentTaskToDelayedList+0x70>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001f5e:	bf38      	it	cc
 8001f60:	601c      	strcc	r4, [r3, #0]
 8001f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f64:	200047ec 	.word	0x200047ec
 8001f68:	200042f8 	.word	0x200042f8
 8001f6c:	200047c4 	.word	0x200047c4
 8001f70:	20004300 	.word	0x20004300
 8001f74:	200042fc 	.word	0x200042fc
 8001f78:	200047a4 	.word	0x200047a4

08001f7c <xTaskCreateStatic>:
	{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001f82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001f84:	b945      	cbnz	r5, 8001f98 <xTaskCreateStatic+0x1c>
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	e7fe      	b.n	8001f96 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001f98:	b944      	cbnz	r4, 8001fac <xTaskCreateStatic+0x30>
 8001f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9e:	f383 8811 	msr	BASEPRI, r3
 8001fa2:	f3bf 8f6f 	isb	sy
 8001fa6:	f3bf 8f4f 	dsb	sy
 8001faa:	e7fe      	b.n	8001faa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001fac:	2654      	movs	r6, #84	; 0x54
 8001fae:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fb0:	9e04      	ldr	r6, [sp, #16]
 8001fb2:	2e54      	cmp	r6, #84	; 0x54
 8001fb4:	d008      	beq.n	8001fc8 <xTaskCreateStatic+0x4c>
 8001fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	e7fe      	b.n	8001fc6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001fc8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001fca:	2502      	movs	r5, #2
 8001fcc:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001fd0:	ad05      	add	r5, sp, #20
 8001fd2:	9501      	str	r5, [sp, #4]
 8001fd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001fd6:	9402      	str	r4, [sp, #8]
 8001fd8:	9500      	str	r5, [sp, #0]
 8001fda:	f7ff ff07 	bl	8001dec <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff fe76 	bl	8001cd0 <prvAddNewTaskToReadyList>
	}
 8001fe4:	9805      	ldr	r0, [sp, #20]
 8001fe6:	b006      	add	sp, #24
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}

08001fea <xTaskCreate>:
	{
 8001fea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fee:	4607      	mov	r7, r0
 8001ff0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ff2:	0090      	lsls	r0, r2, #2
	{
 8001ff4:	4688      	mov	r8, r1
 8001ff6:	4616      	mov	r6, r2
 8001ff8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ffa:	f7ff fa9b 	bl	8001534 <pvPortMalloc>
			if( pxStack != NULL )
 8001ffe:	4605      	mov	r5, r0
 8002000:	b1e8      	cbz	r0, 800203e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002002:	2054      	movs	r0, #84	; 0x54
 8002004:	f7ff fa96 	bl	8001534 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002008:	4604      	mov	r4, r0
 800200a:	b1a8      	cbz	r0, 8002038 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800200c:	2300      	movs	r3, #0
 800200e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002014:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800201a:	9002      	str	r0, [sp, #8]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4632      	mov	r2, r6
 8002020:	464b      	mov	r3, r9
 8002022:	4641      	mov	r1, r8
 8002024:	4638      	mov	r0, r7
 8002026:	f7ff fee1 	bl	8001dec <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff fe50 	bl	8001cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002030:	2001      	movs	r0, #1
	}
 8002032:	b005      	add	sp, #20
 8002034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002038:	4628      	mov	r0, r5
 800203a:	f7ff fb09 	bl	8001650 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002042:	e7f6      	b.n	8002032 <xTaskCreate+0x48>

08002044 <vTaskStartScheduler>:
{
 8002044:	b510      	push	{r4, lr}
 8002046:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002048:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800204a:	aa07      	add	r2, sp, #28
 800204c:	a906      	add	r1, sp, #24
 800204e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002050:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002052:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002054:	f7ff f83e 	bl	80010d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002058:	9b05      	ldr	r3, [sp, #20]
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	9b06      	ldr	r3, [sp, #24]
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	9400      	str	r4, [sp, #0]
 8002062:	4623      	mov	r3, r4
 8002064:	9a07      	ldr	r2, [sp, #28]
 8002066:	4914      	ldr	r1, [pc, #80]	; (80020b8 <vTaskStartScheduler+0x74>)
 8002068:	4814      	ldr	r0, [pc, #80]	; (80020bc <vTaskStartScheduler+0x78>)
 800206a:	f7ff ff87 	bl	8001f7c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800206e:	b9a0      	cbnz	r0, 800209a <vTaskStartScheduler+0x56>
}
 8002070:	b008      	add	sp, #32
 8002072:	bd10      	pop	{r4, pc}
 8002074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <vTaskStartScheduler+0x7c>)
 8002086:	f04f 32ff 	mov.w	r2, #4294967295
 800208a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <vTaskStartScheduler+0x80>)
 800208e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <vTaskStartScheduler+0x84>)
 8002092:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002094:	f7ff f976 	bl	8001384 <xPortStartScheduler>
 8002098:	e7ea      	b.n	8002070 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 800209a:	f000 faf3 	bl	8002684 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800209e:	2801      	cmp	r0, #1
 80020a0:	d0e8      	beq.n	8002074 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80020a2:	3001      	adds	r0, #1
 80020a4:	d1e4      	bne.n	8002070 <vTaskStartScheduler+0x2c>
 80020a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020aa:	f383 8811 	msr	BASEPRI, r3
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f3bf 8f4f 	dsb	sy
 80020b6:	e7fe      	b.n	80020b6 <vTaskStartScheduler+0x72>
 80020b8:	08002d88 	.word	0x08002d88
 80020bc:	08001ea5 	.word	0x08001ea5
 80020c0:	200047a4 	.word	0x200047a4
 80020c4:	200047c0 	.word	0x200047c0
 80020c8:	200047ec 	.word	0x200047ec

080020cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80020cc:	4a02      	ldr	r2, [pc, #8]	; (80020d8 <vTaskSuspendAll+0xc>)
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20004770 	.word	0x20004770

080020dc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80020dc:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <xTaskGetTickCount+0x8>)
 80020de:	6818      	ldr	r0, [r3, #0]
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200047ec 	.word	0x200047ec

080020e8 <xTaskIncrementTick>:
{
 80020e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <xTaskIncrementTick+0xf4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d151      	bne.n	8002198 <xTaskIncrementTick+0xb0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020f4:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <xTaskIncrementTick+0xf8>)
 80020f6:	681c      	ldr	r4, [r3, #0]
 80020f8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80020fa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020fc:	b9bc      	cbnz	r4, 800212e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <xTaskIncrementTick+0xfc>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	b142      	cbz	r2, 8002118 <xTaskIncrementTick+0x30>
 8002106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210a:	f383 8811 	msr	BASEPRI, r3
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	e7fe      	b.n	8002116 <xTaskIncrementTick+0x2e>
 8002118:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <xTaskIncrementTick+0x100>)
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	6810      	ldr	r0, [r2, #0]
 800211e:	6018      	str	r0, [r3, #0]
 8002120:	6011      	str	r1, [r2, #0]
 8002122:	4a32      	ldr	r2, [pc, #200]	; (80021ec <xTaskIncrementTick+0x104>)
 8002124:	6813      	ldr	r3, [r2, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	f7ff fe4d 	bl	8001dc8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800212e:	4d30      	ldr	r5, [pc, #192]	; (80021f0 <xTaskIncrementTick+0x108>)
 8002130:	4f30      	ldr	r7, [pc, #192]	; (80021f4 <xTaskIncrementTick+0x10c>)
 8002132:	682b      	ldr	r3, [r5, #0]
 8002134:	429c      	cmp	r4, r3
 8002136:	f04f 0b00 	mov.w	fp, #0
 800213a:	d33c      	bcc.n	80021b6 <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800213c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80021e4 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8002140:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8002204 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002144:	f8d8 2000 	ldr.w	r2, [r8]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	bb62      	cbnz	r2, 80021a6 <xTaskIncrementTick+0xbe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	602a      	str	r2, [r5, #0]
					break;
 8002152:	e030      	b.n	80021b6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002154:	f106 0a04 	add.w	sl, r6, #4
 8002158:	4650      	mov	r0, sl
 800215a:	f7ff f804 	bl	8001166 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800215e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002160:	b119      	cbz	r1, 800216a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002162:	f106 0018 	add.w	r0, r6, #24
 8002166:	f7fe fffe 	bl	8001166 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800216a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800216c:	f8d9 1000 	ldr.w	r1, [r9]
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <xTaskIncrementTick+0x110>)
 8002172:	4288      	cmp	r0, r1
 8002174:	f04f 0214 	mov.w	r2, #20
 8002178:	bf88      	it	hi
 800217a:	f8c9 0000 	strhi.w	r0, [r9]
 800217e:	4651      	mov	r1, sl
 8002180:	fb02 3000 	mla	r0, r2, r0, r3
 8002184:	f7fe ffcc 	bl	8001120 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800218c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800218e:	4291      	cmp	r1, r2
 8002190:	bf28      	it	cs
 8002192:	f04f 0b01 	movcs.w	fp, #1
 8002196:	e7d5      	b.n	8002144 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002198:	4a18      	ldr	r2, [pc, #96]	; (80021fc <xTaskIncrementTick+0x114>)
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80021a0:	f04f 0b00 	mov.w	fp, #0
 80021a4:	e011      	b.n	80021ca <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021a6:	f8d8 2000 	ldr.w	r2, [r8]
 80021aa:	68d2      	ldr	r2, [r2, #12]
 80021ac:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021ae:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80021b0:	428c      	cmp	r4, r1
 80021b2:	d2cf      	bcs.n	8002154 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80021b4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <xTaskIncrementTick+0x110>)
 80021ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021bc:	2214      	movs	r2, #20
 80021be:	434a      	muls	r2, r1
 80021c0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80021c2:	2a02      	cmp	r2, #2
 80021c4:	bf28      	it	cs
 80021c6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <xTaskIncrementTick+0x118>)
 80021cc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	bf18      	it	ne
 80021d2:	f04f 0b01 	movne.w	fp, #1
}
 80021d6:	4658      	mov	r0, fp
 80021d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021dc:	20004770 	.word	0x20004770
 80021e0:	200047ec 	.word	0x200047ec
 80021e4:	200042fc 	.word	0x200042fc
 80021e8:	20004300 	.word	0x20004300
 80021ec:	200047a8 	.word	0x200047a8
 80021f0:	200047a4 	.word	0x200047a4
 80021f4:	200042f8 	.word	0x200042f8
 80021f8:	20004304 	.word	0x20004304
 80021fc:	2000476c 	.word	0x2000476c
 8002200:	200047f0 	.word	0x200047f0
 8002204:	20004778 	.word	0x20004778

08002208 <xTaskResumeAll>:
{
 8002208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800220c:	4c2f      	ldr	r4, [pc, #188]	; (80022cc <xTaskResumeAll+0xc4>)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	b943      	cbnz	r3, 8002224 <xTaskResumeAll+0x1c>
 8002212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002216:	f383 8811 	msr	BASEPRI, r3
 800221a:	f3bf 8f6f 	isb	sy
 800221e:	f3bf 8f4f 	dsb	sy
 8002222:	e7fe      	b.n	8002222 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002224:	f7ff f816 	bl	8001254 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800222e:	6824      	ldr	r4, [r4, #0]
 8002230:	b12c      	cbz	r4, 800223e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002232:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002234:	f7ff f830 	bl	8001298 <vPortExitCritical>
}
 8002238:	4620      	mov	r0, r4
 800223a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <xTaskResumeAll+0xc8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f5      	beq.n	8002232 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002246:	4e23      	ldr	r6, [pc, #140]	; (80022d4 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8002248:	4f23      	ldr	r7, [pc, #140]	; (80022d8 <xTaskResumeAll+0xd0>)
 800224a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80022ec <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800224e:	6833      	ldr	r3, [r6, #0]
 8002250:	b9e3      	cbnz	r3, 800228c <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 8002252:	b10c      	cbz	r4, 8002258 <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 8002254:	f7ff fdb8 	bl	8001dc8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002258:	4d20      	ldr	r5, [pc, #128]	; (80022dc <xTaskResumeAll+0xd4>)
 800225a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800225c:	b144      	cbz	r4, 8002270 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 800225e:	4e20      	ldr	r6, [pc, #128]	; (80022e0 <xTaskResumeAll+0xd8>)
 8002260:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002262:	f7ff ff41 	bl	80020e8 <xTaskIncrementTick>
 8002266:	b100      	cbz	r0, 800226a <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8002268:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800226a:	3c01      	subs	r4, #1
 800226c:	d1f9      	bne.n	8002262 <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 800226e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <xTaskResumeAll+0xd8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0dc      	beq.n	8002232 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <xTaskResumeAll+0xdc>)
 800227a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002288:	2401      	movs	r4, #1
 800228a:	e7d3      	b.n	8002234 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800228c:	68f3      	ldr	r3, [r6, #12]
 800228e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002290:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002292:	f104 0018 	add.w	r0, r4, #24
 8002296:	f7fe ff66 	bl	8001166 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800229a:	4628      	mov	r0, r5
 800229c:	f7fe ff63 	bl	8001166 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	2014      	movs	r0, #20
 80022a6:	4293      	cmp	r3, r2
 80022a8:	fb00 8003 	mla	r0, r0, r3, r8
 80022ac:	4629      	mov	r1, r5
 80022ae:	bf88      	it	hi
 80022b0:	603b      	strhi	r3, [r7, #0]
 80022b2:	f7fe ff35 	bl	8001120 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <xTaskResumeAll+0xe0>)
 80022b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80022c0:	bf22      	ittt	cs
 80022c2:	4b07      	ldrcs	r3, [pc, #28]	; (80022e0 <xTaskResumeAll+0xd8>)
 80022c4:	2201      	movcs	r2, #1
 80022c6:	601a      	strcs	r2, [r3, #0]
 80022c8:	e7c1      	b.n	800224e <xTaskResumeAll+0x46>
 80022ca:	bf00      	nop
 80022cc:	20004770 	.word	0x20004770
 80022d0:	20004764 	.word	0x20004764
 80022d4:	200047ac 	.word	0x200047ac
 80022d8:	20004778 	.word	0x20004778
 80022dc:	2000476c 	.word	0x2000476c
 80022e0:	200047f0 	.word	0x200047f0
 80022e4:	e000ed04 	.word	0xe000ed04
 80022e8:	200042f8 	.word	0x200042f8
 80022ec:	20004304 	.word	0x20004304

080022f0 <vTaskDelay>:
	{
 80022f0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022f2:	b940      	cbnz	r0, 8002306 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <vTaskDelay+0x40>)
 80022f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <vTaskDelay+0x44>)
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	b141      	cbz	r1, 800231e <vTaskDelay+0x2e>
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	e7fe      	b.n	800231c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800231e:	f7ff fed5 	bl	80020cc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002322:	f7ff fdf1 	bl	8001f08 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002326:	f7ff ff6f 	bl	8002208 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800232a:	2800      	cmp	r0, #0
 800232c:	d0e2      	beq.n	80022f4 <vTaskDelay+0x4>
 800232e:	bd08      	pop	{r3, pc}
 8002330:	e000ed04 	.word	0xe000ed04
 8002334:	20004770 	.word	0x20004770

08002338 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <vTaskSwitchContext+0x64>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <vTaskSwitchContext+0x68>)
{
 800233e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002340:	b112      	cbz	r2, 8002348 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002348:	4d16      	ldr	r5, [pc, #88]	; (80023a4 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 800234a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <vTaskSwitchContext+0x70>)
 800234e:	682b      	ldr	r3, [r5, #0]
 8002350:	2714      	movs	r7, #20
 8002352:	4616      	mov	r6, r2
 8002354:	fb07 f103 	mul.w	r1, r7, r3
 8002358:	1850      	adds	r0, r2, r1
 800235a:	5854      	ldr	r4, [r2, r1]
 800235c:	b18c      	cbz	r4, 8002382 <vTaskSwitchContext+0x4a>
 800235e:	6844      	ldr	r4, [r0, #4]
 8002360:	3108      	adds	r1, #8
 8002362:	6864      	ldr	r4, [r4, #4]
 8002364:	6044      	str	r4, [r0, #4]
 8002366:	440a      	add	r2, r1
 8002368:	4294      	cmp	r4, r2
 800236a:	bf04      	itt	eq
 800236c:	6862      	ldreq	r2, [r4, #4]
 800236e:	6042      	streq	r2, [r0, #4]
 8002370:	2214      	movs	r2, #20
 8002372:	fb02 6203 	mla	r2, r2, r3, r6
 8002376:	6852      	ldr	r2, [r2, #4]
 8002378:	68d1      	ldr	r1, [r2, #12]
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <vTaskSwitchContext+0x74>)
 800237c:	6011      	str	r1, [r2, #0]
 800237e:	602b      	str	r3, [r5, #0]
 8002380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002382:	b943      	cbnz	r3, 8002396 <vTaskSwitchContext+0x5e>
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	e7fe      	b.n	8002394 <vTaskSwitchContext+0x5c>
 8002396:	3b01      	subs	r3, #1
 8002398:	e7dc      	b.n	8002354 <vTaskSwitchContext+0x1c>
 800239a:	bf00      	nop
 800239c:	20004770 	.word	0x20004770
 80023a0:	200047f0 	.word	0x200047f0
 80023a4:	20004778 	.word	0x20004778
 80023a8:	20004304 	.word	0x20004304
 80023ac:	200042f8 	.word	0x200042f8

080023b0 <vTaskPlaceOnEventList>:
{
 80023b0:	b510      	push	{r4, lr}
 80023b2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80023b4:	b940      	cbnz	r0, 80023c8 <vTaskPlaceOnEventList+0x18>
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	e7fe      	b.n	80023c6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <vTaskPlaceOnEventList+0x30>)
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	3118      	adds	r1, #24
 80023ce:	f7fe feb3 	bl	8001138 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023d2:	4620      	mov	r0, r4
 80023d4:	2101      	movs	r1, #1
}
 80023d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023da:	f7ff bd95 	b.w	8001f08 <prvAddCurrentTaskToDelayedList>
 80023de:	bf00      	nop
 80023e0:	200042f8 	.word	0x200042f8

080023e4 <vTaskPlaceOnEventListRestricted>:
	{
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	460d      	mov	r5, r1
 80023e8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80023ea:	b940      	cbnz	r0, 80023fe <vTaskPlaceOnEventListRestricted+0x1a>
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	e7fe      	b.n	80023fc <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <vTaskPlaceOnEventListRestricted+0x38>)
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	3118      	adds	r1, #24
 8002404:	f7fe fe8c 	bl	8001120 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8002408:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800240a:	4621      	mov	r1, r4
 800240c:	bf0c      	ite	eq
 800240e:	4628      	moveq	r0, r5
 8002410:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8002414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002418:	f7ff bd76 	b.w	8001f08 <prvAddCurrentTaskToDelayedList>
 800241c:	200042f8 	.word	0x200042f8

08002420 <xTaskRemoveFromEventList>:
{
 8002420:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002422:	68c3      	ldr	r3, [r0, #12]
 8002424:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002426:	b944      	cbnz	r4, 800243a <xTaskRemoveFromEventList+0x1a>
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	e7fe      	b.n	8002438 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800243a:	f104 0518 	add.w	r5, r4, #24
 800243e:	4628      	mov	r0, r5
 8002440:	f7fe fe91 	bl	8001166 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <xTaskRemoveFromEventList+0x68>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b9db      	cbnz	r3, 8002482 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800244a:	1d25      	adds	r5, r4, #4
 800244c:	4628      	mov	r0, r5
 800244e:	f7fe fe8a 	bl	8001166 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <xTaskRemoveFromEventList+0x6c>)
 8002454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002456:	6811      	ldr	r1, [r2, #0]
 8002458:	428b      	cmp	r3, r1
 800245a:	bf88      	it	hi
 800245c:	6013      	strhi	r3, [r2, #0]
 800245e:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <xTaskRemoveFromEventList+0x70>)
 8002460:	2014      	movs	r0, #20
 8002462:	4629      	mov	r1, r5
 8002464:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002468:	f7fe fe5a 	bl	8001120 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <xTaskRemoveFromEventList+0x74>)
 800246e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002476:	bf83      	ittte	hi
 8002478:	4b07      	ldrhi	r3, [pc, #28]	; (8002498 <xTaskRemoveFromEventList+0x78>)
 800247a:	2001      	movhi	r0, #1
 800247c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800247e:	2000      	movls	r0, #0
}
 8002480:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002482:	4629      	mov	r1, r5
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <xTaskRemoveFromEventList+0x7c>)
 8002486:	e7ef      	b.n	8002468 <xTaskRemoveFromEventList+0x48>
 8002488:	20004770 	.word	0x20004770
 800248c:	20004778 	.word	0x20004778
 8002490:	20004304 	.word	0x20004304
 8002494:	200042f8 	.word	0x200042f8
 8002498:	200047f0 	.word	0x200047f0
 800249c:	200047ac 	.word	0x200047ac

080024a0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <vTaskInternalSetTimeOutState+0x10>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024a6:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <vTaskInternalSetTimeOutState+0x14>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6043      	str	r3, [r0, #4]
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	200047a8 	.word	0x200047a8
 80024b4:	200047ec 	.word	0x200047ec

080024b8 <xTaskCheckForTimeOut>:
{
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80024bc:	4605      	mov	r5, r0
 80024be:	b940      	cbnz	r0, 80024d2 <xTaskCheckForTimeOut+0x1a>
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	e7fe      	b.n	80024d0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80024d2:	b941      	cbnz	r1, 80024e6 <xTaskCheckForTimeOut+0x2e>
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	e7fe      	b.n	80024e4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80024e6:	f7fe feb5 	bl	8001254 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80024ec:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80024ee:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	1c58      	adds	r0, r3, #1
 80024f4:	d00e      	beq.n	8002514 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <xTaskCheckForTimeOut+0x74>)
 80024f8:	682e      	ldr	r6, [r5, #0]
 80024fa:	6800      	ldr	r0, [r0, #0]
 80024fc:	4286      	cmp	r6, r0
 80024fe:	d001      	beq.n	8002504 <xTaskCheckForTimeOut+0x4c>
 8002500:	428a      	cmp	r2, r1
 8002502:	d20e      	bcs.n	8002522 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002504:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002506:	429a      	cmp	r2, r3
 8002508:	d209      	bcs.n	800251e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800250e:	4628      	mov	r0, r5
 8002510:	f7ff ffc6 	bl	80024a0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8002514:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002516:	f7fe febf 	bl	8001298 <vPortExitCritical>
}
 800251a:	4620      	mov	r0, r4
 800251c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002522:	2401      	movs	r4, #1
 8002524:	e7f7      	b.n	8002516 <xTaskCheckForTimeOut+0x5e>
 8002526:	bf00      	nop
 8002528:	200047ec 	.word	0x200047ec
 800252c:	200047a8 	.word	0x200047a8

08002530 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002530:	4b01      	ldr	r3, [pc, #4]	; (8002538 <vTaskMissedYield+0x8>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	4770      	bx	lr
 8002538:	200047f0 	.word	0x200047f0

0800253c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <xTaskGetSchedulerState+0x18>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b133      	cbz	r3, 8002550 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <xTaskGetSchedulerState+0x1c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002548:	bf0c      	ite	eq
 800254a:	2002      	moveq	r0, #2
 800254c:	2000      	movne	r0, #0
 800254e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002550:	2001      	movs	r0, #1
	}
 8002552:	4770      	bx	lr
 8002554:	200047c0 	.word	0x200047c0
 8002558:	20004770 	.word	0x20004770

0800255c <xTaskPriorityDisinherit>:
	{
 800255c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800255e:	4604      	mov	r4, r0
 8002560:	b908      	cbnz	r0, 8002566 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002562:	2000      	movs	r0, #0
 8002564:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <xTaskPriorityDisinherit+0x78>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4298      	cmp	r0, r3
 800256c:	d008      	beq.n	8002580 <xTaskPriorityDisinherit+0x24>
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	e7fe      	b.n	800257e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002580:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002582:	b943      	cbnz	r3, 8002596 <xTaskPriorityDisinherit+0x3a>
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	e7fe      	b.n	8002594 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002596:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002598:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800259a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800259c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800259e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025a0:	d0df      	beq.n	8002562 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1dd      	bne.n	8002562 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025a6:	1d05      	adds	r5, r0, #4
 80025a8:	4628      	mov	r0, r5
 80025aa:	f7fe fddc 	bl	8001166 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025b0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80025b6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <xTaskPriorityDisinherit+0x7c>)
 80025ba:	6811      	ldr	r1, [r2, #0]
 80025bc:	428b      	cmp	r3, r1
 80025be:	bf88      	it	hi
 80025c0:	6013      	strhi	r3, [r2, #0]
 80025c2:	4a06      	ldr	r2, [pc, #24]	; (80025dc <xTaskPriorityDisinherit+0x80>)
 80025c4:	2014      	movs	r0, #20
 80025c6:	fb00 2003 	mla	r0, r0, r3, r2
 80025ca:	4629      	mov	r1, r5
 80025cc:	f7fe fda8 	bl	8001120 <vListInsertEnd>
					xReturn = pdTRUE;
 80025d0:	2001      	movs	r0, #1
	}
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	200042f8 	.word	0x200042f8
 80025d8:	20004778 	.word	0x20004778
 80025dc:	20004304 	.word	0x20004304

080025e0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80025e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80025e2:	4c11      	ldr	r4, [pc, #68]	; (8002628 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80025e4:	f7fe fe36 	bl	8001254 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80025e8:	6825      	ldr	r5, [r4, #0]
 80025ea:	b9bd      	cbnz	r5, 800261c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80025ec:	4f0f      	ldr	r7, [pc, #60]	; (800262c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80025ee:	4e10      	ldr	r6, [pc, #64]	; (8002630 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80025f0:	4638      	mov	r0, r7
 80025f2:	f7fe fd87 	bl	8001104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80025f6:	4630      	mov	r0, r6
 80025f8:	f7fe fd84 	bl	8001104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8002600:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002604:	210c      	movs	r1, #12
			pxOverflowTimerList = &xActiveTimerList2;
 8002606:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002608:	200a      	movs	r0, #10
 800260a:	9500      	str	r5, [sp, #0]
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <prvCheckForValidListAndQueue+0x60>)
 800260e:	f7ff f923 	bl	8001858 <xQueueGenericCreateStatic>
 8002612:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002614:	b110      	cbz	r0, 800261c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002616:	490b      	ldr	r1, [pc, #44]	; (8002644 <prvCheckForValidListAndQueue+0x64>)
 8002618:	f7ff fb24 	bl	8001c64 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800261c:	b003      	add	sp, #12
 800261e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002622:	f7fe be39 	b.w	8001298 <vPortExitCritical>
 8002626:	bf00      	nop
 8002628:	200048e8 	.word	0x200048e8
 800262c:	20004874 	.word	0x20004874
 8002630:	20004888 	.word	0x20004888
 8002634:	200047f4 	.word	0x200047f4
 8002638:	200047fc 	.word	0x200047fc
 800263c:	200047f8 	.word	0x200047f8
 8002640:	200048a0 	.word	0x200048a0
 8002644:	08002d8d 	.word	0x08002d8d

08002648 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8002648:	4291      	cmp	r1, r2
{
 800264a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800264c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800264e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002650:	d80a      	bhi.n	8002668 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002652:	1ad2      	subs	r2, r2, r3
 8002654:	6983      	ldr	r3, [r0, #24]
 8002656:	429a      	cmp	r2, r3
 8002658:	d20d      	bcs.n	8002676 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <prvInsertTimerInActiveList+0x34>)
 800265c:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	f7fe fd6a 	bl	8001138 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002664:	2000      	movs	r0, #0
 8002666:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002668:	429a      	cmp	r2, r3
 800266a:	d201      	bcs.n	8002670 <prvInsertTimerInActiveList+0x28>
 800266c:	4299      	cmp	r1, r3
 800266e:	d202      	bcs.n	8002676 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002670:	1d01      	adds	r1, r0, #4
 8002672:	4b03      	ldr	r3, [pc, #12]	; (8002680 <prvInsertTimerInActiveList+0x38>)
 8002674:	e7f3      	b.n	800265e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002676:	2001      	movs	r0, #1
}
 8002678:	bd08      	pop	{r3, pc}
 800267a:	bf00      	nop
 800267c:	200047f8 	.word	0x200047f8
 8002680:	200047f4 	.word	0x200047f4

08002684 <xTimerCreateTimerTask>:
{
 8002684:	b510      	push	{r4, lr}
 8002686:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002688:	f7ff ffaa 	bl	80025e0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <xTimerCreateTimerTask+0x58>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b943      	cbnz	r3, 80026a4 <xTimerCreateTimerTask+0x20>
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	e7fe      	b.n	80026a2 <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80026a4:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80026a6:	aa07      	add	r2, sp, #28
 80026a8:	a906      	add	r1, sp, #24
 80026aa:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80026ac:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80026ae:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80026b0:	f7fe fd1c 	bl	80010ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80026b4:	9b05      	ldr	r3, [sp, #20]
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	9b06      	ldr	r3, [sp, #24]
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2302      	movs	r3, #2
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	9a07      	ldr	r2, [sp, #28]
 80026c2:	4907      	ldr	r1, [pc, #28]	; (80026e0 <xTimerCreateTimerTask+0x5c>)
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <xTimerCreateTimerTask+0x60>)
 80026c6:	4623      	mov	r3, r4
 80026c8:	f7ff fc58 	bl	8001f7c <xTaskCreateStatic>
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <xTimerCreateTimerTask+0x64>)
 80026ce:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d0de      	beq.n	8002692 <xTimerCreateTimerTask+0xe>
}
 80026d4:	2001      	movs	r0, #1
 80026d6:	b008      	add	sp, #32
 80026d8:	bd10      	pop	{r4, pc}
 80026da:	bf00      	nop
 80026dc:	200048e8 	.word	0x200048e8
 80026e0:	08002d92 	.word	0x08002d92
 80026e4:	080027c1 	.word	0x080027c1
 80026e8:	200048ec 	.word	0x200048ec

080026ec <xTimerGenericCommand>:
{
 80026ec:	b530      	push	{r4, r5, lr}
 80026ee:	4615      	mov	r5, r2
 80026f0:	b085      	sub	sp, #20
 80026f2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80026f4:	4603      	mov	r3, r0
 80026f6:	b940      	cbnz	r0, 800270a <xTimerGenericCommand+0x1e>
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	e7fe      	b.n	8002708 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 800270a:	4c0d      	ldr	r4, [pc, #52]	; (8002740 <xTimerGenericCommand+0x54>)
 800270c:	6820      	ldr	r0, [r4, #0]
 800270e:	b180      	cbz	r0, 8002732 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002710:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8002712:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002714:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002716:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002718:	dc0d      	bgt.n	8002736 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800271a:	f7ff ff0f 	bl	800253c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800271e:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002720:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002722:	bf08      	it	eq
 8002724:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002726:	6820      	ldr	r0, [r4, #0]
 8002728:	bf18      	it	ne
 800272a:	461a      	movne	r2, r3
 800272c:	a901      	add	r1, sp, #4
 800272e:	f7ff f8dd 	bl	80018ec <xQueueGenericSend>
}
 8002732:	b005      	add	sp, #20
 8002734:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002736:	2300      	movs	r3, #0
 8002738:	a901      	add	r1, sp, #4
 800273a:	f7ff f98d 	bl	8001a58 <xQueueGenericSendFromISR>
 800273e:	e7f8      	b.n	8002732 <xTimerGenericCommand+0x46>
 8002740:	200048e8 	.word	0x200048e8

08002744 <prvSwitchTimerLists>:
{
 8002744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002748:	4d1b      	ldr	r5, [pc, #108]	; (80027b8 <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800274a:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800274e:	682b      	ldr	r3, [r5, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	b932      	cbnz	r2, 8002762 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <prvSwitchTimerLists+0x78>)
 8002756:	6811      	ldr	r1, [r2, #0]
 8002758:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	b002      	add	sp, #8
 800275e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002762:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002764:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002766:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002768:	1d27      	adds	r7, r4, #4
 800276a:	4638      	mov	r0, r7
 800276c:	f7fe fcfb 	bl	8001166 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002772:	4620      	mov	r0, r4
 8002774:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002776:	69e3      	ldr	r3, [r4, #28]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d1e8      	bne.n	800274e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800277c:	69a3      	ldr	r3, [r4, #24]
 800277e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002780:	429e      	cmp	r6, r3
 8002782:	d206      	bcs.n	8002792 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002784:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002786:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002788:	4639      	mov	r1, r7
 800278a:	6828      	ldr	r0, [r5, #0]
 800278c:	f7fe fcd4 	bl	8001138 <vListInsert>
 8002790:	e7dd      	b.n	800274e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002792:	2300      	movs	r3, #0
 8002794:	f8cd 8000 	str.w	r8, [sp]
 8002798:	4632      	mov	r2, r6
 800279a:	4619      	mov	r1, r3
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ffa5 	bl	80026ec <xTimerGenericCommand>
				configASSERT( xResult );
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d1d3      	bne.n	800274e <prvSwitchTimerLists+0xa>
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	e7fe      	b.n	80027b6 <prvSwitchTimerLists+0x72>
 80027b8:	200047f4 	.word	0x200047f4
 80027bc:	200047f8 	.word	0x200047f8

080027c0 <prvTimerTask>:
{
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80027c4:	4d6e      	ldr	r5, [pc, #440]	; (8002980 <prvTimerTask+0x1c0>)
					portYIELD_WITHIN_API();
 80027c6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8002990 <prvTimerTask+0x1d0>
{
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80027ce:	682b      	ldr	r3, [r5, #0]
 80027d0:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 80027d4:	f1bb 0f00 	cmp.w	fp, #0
 80027d8:	d043      	beq.n	8002862 <prvTimerTask+0xa2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 80027e0:	f7ff fc74 	bl	80020cc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80027e4:	f7ff fc7a 	bl	80020dc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <prvTimerTask+0x1c4>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 80027ee:	4682      	mov	sl, r0
 80027f0:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 80027f2:	d238      	bcs.n	8002866 <prvTimerTask+0xa6>
 80027f4:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 80027f6:	f7ff ffa5 	bl	8002744 <prvSwitchTimerLists>
 80027fa:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 80027fc:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 80027fe:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 8002802:	2c00      	cmp	r4, #0
 8002804:	f040 8082 	bne.w	800290c <prvTimerTask+0x14c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002808:	f1bb 0f00 	cmp.w	fp, #0
 800280c:	d063      	beq.n	80028d6 <prvTimerTask+0x116>
 800280e:	45d1      	cmp	r9, sl
 8002810:	d87a      	bhi.n	8002908 <prvTimerTask+0x148>
				( void ) xTaskResumeAll();
 8002812:	f7ff fcf9 	bl	8002208 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800281e:	f10b 0004 	add.w	r0, fp, #4
 8002822:	f7fe fca0 	bl	8001166 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002826:	f8db 301c 	ldr.w	r3, [fp, #28]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d11d      	bne.n	800286a <prvTimerTask+0xaa>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800282e:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002832:	464b      	mov	r3, r9
 8002834:	4652      	mov	r2, sl
 8002836:	4449      	add	r1, r9
 8002838:	4658      	mov	r0, fp
 800283a:	f7ff ff05 	bl	8002648 <prvInsertTimerInActiveList>
 800283e:	b1a0      	cbz	r0, 800286a <prvTimerTask+0xaa>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002840:	9400      	str	r4, [sp, #0]
 8002842:	4623      	mov	r3, r4
 8002844:	464a      	mov	r2, r9
 8002846:	4621      	mov	r1, r4
 8002848:	4658      	mov	r0, fp
 800284a:	f7ff ff4f 	bl	80026ec <xTimerGenericCommand>
			configASSERT( xResult );
 800284e:	b960      	cbnz	r0, 800286a <prvTimerTask+0xaa>
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	e7fe      	b.n	8002860 <prvTimerTask+0xa0>
		xNextExpireTime = ( TickType_t ) 0U;
 8002862:	46d9      	mov	r9, fp
 8002864:	e7bc      	b.n	80027e0 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8002866:	2400      	movs	r4, #0
 8002868:	e7c9      	b.n	80027fe <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800286a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800286e:	4658      	mov	r0, fp
 8002870:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002872:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800298c <prvTimerTask+0x1cc>
 8002876:	f8d9 0000 	ldr.w	r0, [r9]
 800287a:	2200      	movs	r2, #0
 800287c:	a905      	add	r1, sp, #20
 800287e:	f7ff f94d 	bl	8001b1c <xQueueReceive>
 8002882:	2800      	cmp	r0, #0
 8002884:	d0a3      	beq.n	80027ce <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002886:	9b05      	ldr	r3, [sp, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	dbf4      	blt.n	8002876 <prvTimerTask+0xb6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800288c:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800288e:	6963      	ldr	r3, [r4, #20]
 8002890:	b113      	cbz	r3, 8002898 <prvTimerTask+0xd8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002892:	1d20      	adds	r0, r4, #4
 8002894:	f7fe fc67 	bl	8001166 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8002898:	f7ff fc20 	bl	80020dc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800289c:	6833      	ldr	r3, [r6, #0]
 800289e:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80028a0:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80028a2:	d201      	bcs.n	80028a8 <prvTimerTask+0xe8>
		prvSwitchTimerLists();
 80028a4:	f7ff ff4e 	bl	8002744 <prvSwitchTimerLists>
 80028a8:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 80028aa:	f8c6 b000 	str.w	fp, [r6]
 80028ae:	2a09      	cmp	r2, #9
 80028b0:	d8e1      	bhi.n	8002876 <prvTimerTask+0xb6>
 80028b2:	2301      	movs	r3, #1
 80028b4:	4093      	lsls	r3, r2
 80028b6:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80028ba:	d14e      	bne.n	800295a <prvTimerTask+0x19a>
 80028bc:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80028c0:	d127      	bne.n	8002912 <prvTimerTask+0x152>
 80028c2:	069b      	lsls	r3, r3, #26
 80028c4:	d5d7      	bpl.n	8002876 <prvTimerTask+0xb6>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80028c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1d3      	bne.n	8002876 <prvTimerTask+0xb6>
							vPortFree( pxTimer );
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7fe febe 	bl	8001650 <vPortFree>
 80028d4:	e7cf      	b.n	8002876 <prvTimerTask+0xb6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80028d6:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <prvTimerTask+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <prvTimerTask+0x1cc>)
 80028e4:	eba9 010a 	sub.w	r1, r9, sl
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	f7ff f9cd 	bl	8001c88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80028ee:	f7ff fc8b 	bl	8002208 <xTaskResumeAll>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d1bd      	bne.n	8002872 <prvTimerTask+0xb2>
					portYIELD_WITHIN_API();
 80028f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028fa:	f8c8 3000 	str.w	r3, [r8]
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	e7b4      	b.n	8002872 <prvTimerTask+0xb2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002908:	4622      	mov	r2, r4
 800290a:	e7ea      	b.n	80028e2 <prvTimerTask+0x122>
			( void ) xTaskResumeAll();
 800290c:	f7ff fc7c 	bl	8002208 <xTaskResumeAll>
 8002910:	e7af      	b.n	8002872 <prvTimerTask+0xb2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002912:	69a1      	ldr	r1, [r4, #24]
 8002914:	9b06      	ldr	r3, [sp, #24]
 8002916:	465a      	mov	r2, fp
 8002918:	4419      	add	r1, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff fe94 	bl	8002648 <prvInsertTimerInActiveList>
 8002920:	2800      	cmp	r0, #0
 8002922:	d0a8      	beq.n	8002876 <prvTimerTask+0xb6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002926:	4620      	mov	r0, r4
 8002928:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800292a:	69e3      	ldr	r3, [r4, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d1a2      	bne.n	8002876 <prvTimerTask+0xb6>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002930:	69a2      	ldr	r2, [r4, #24]
 8002932:	9906      	ldr	r1, [sp, #24]
 8002934:	f8cd a000 	str.w	sl, [sp]
 8002938:	440a      	add	r2, r1
 800293a:	4653      	mov	r3, sl
 800293c:	4651      	mov	r1, sl
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff fed4 	bl	80026ec <xTimerGenericCommand>
							configASSERT( xResult );
 8002944:	2800      	cmp	r0, #0
 8002946:	d196      	bne.n	8002876 <prvTimerTask+0xb6>
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	e7fe      	b.n	8002958 <prvTimerTask+0x198>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800295a:	9906      	ldr	r1, [sp, #24]
 800295c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800295e:	b941      	cbnz	r1, 8002972 <prvTimerTask+0x1b2>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	e7fe      	b.n	8002970 <prvTimerTask+0x1b0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002972:	465b      	mov	r3, fp
 8002974:	465a      	mov	r2, fp
 8002976:	4459      	add	r1, fp
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fe65 	bl	8002648 <prvInsertTimerInActiveList>
 800297e:	e77a      	b.n	8002876 <prvTimerTask+0xb6>
 8002980:	200047f4 	.word	0x200047f4
 8002984:	2000489c 	.word	0x2000489c
 8002988:	200047f8 	.word	0x200047f8
 800298c:	200048e8 	.word	0x200048e8
 8002990:	e000ed04 	.word	0xe000ed04

08002994 <R_Task1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_R_Task1 */
void R_Task1(void *argument)
{
 8002994:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 5 */
  const TickType_t xR_Task1_Time = pdMS_TO_TICKS(500);
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002996:	4c05      	ldr	r4, [pc, #20]	; (80029ac <R_Task1+0x18>)
 8002998:	4620      	mov	r0, r4
 800299a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800299e:	f7fd ff04 	bl	80007aa <HAL_GPIO_TogglePin>
    osDelay(xR_Task1_Time);
 80029a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029a6:	f7fe fb7b 	bl	80010a0 <osDelay>
 80029aa:	e7f5      	b.n	8002998 <R_Task1+0x4>
 80029ac:	40020c00 	.word	0x40020c00

080029b0 <R_Task2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_R_Task2 */
void R_Task2(void *argument)
{
 80029b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN R_Task2 */
  const TickType_t xR_Task2_Time = pdMS_TO_TICKS(500);
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80029b2:	4c05      	ldr	r4, [pc, #20]	; (80029c8 <R_Task2+0x18>)
 80029b4:	4620      	mov	r0, r4
 80029b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ba:	f7fd fef6 	bl	80007aa <HAL_GPIO_TogglePin>
	  osDelay(xR_Task2_Time);
 80029be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029c2:	f7fe fb6d 	bl	80010a0 <osDelay>
 80029c6:	e7f5      	b.n	80029b4 <R_Task2+0x4>
 80029c8:	40020c00 	.word	0x40020c00

080029cc <SystemClock_Config>:
{
 80029cc:	b530      	push	{r4, r5, lr}
 80029ce:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d0:	2230      	movs	r2, #48	; 0x30
 80029d2:	2100      	movs	r1, #0
 80029d4:	a808      	add	r0, sp, #32
 80029d6:	f000 f9c2 	bl	8002d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029da:	2100      	movs	r1, #0
 80029dc:	2214      	movs	r2, #20
 80029de:	a803      	add	r0, sp, #12
 80029e0:	f000 f9bd 	bl	8002d5e <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	2400      	movs	r4, #0
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <SystemClock_Config+0x90>)
 80029e8:	9401      	str	r4, [sp, #4]
 80029ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <SystemClock_Config+0x94>)
 80029fe:	9402      	str	r4, [sp, #8]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a1a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a20:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a22:	2308      	movs	r3, #8
 8002a24:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a26:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a2a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a2c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a30:	2307      	movs	r3, #7
 8002a32:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a34:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a36:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a38:	f7fd febe 	bl	80007b8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a44:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a46:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a4c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a50:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a52:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a54:	f7fe f884 	bl	8000b60 <HAL_RCC_ClockConfig>
}
 8002a58:	b015      	add	sp, #84	; 0x54
 8002a5a:	bd30      	pop	{r4, r5, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000

08002a64 <main>:
{
 8002a64:	b500      	push	{lr}
 8002a66:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8002a68:	f7fd fd3a 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8002a6c:	f7ff ffae 	bl	80029cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	2214      	movs	r2, #20
 8002a72:	2100      	movs	r1, #0
 8002a74:	a80d      	add	r0, sp, #52	; 0x34
 8002a76:	f000 f972 	bl	8002d5e <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a7a:	2400      	movs	r4, #0
 8002a7c:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <main+0x114>)
 8002a7e:	9400      	str	r4, [sp, #0]
 8002a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002a82:	483e      	ldr	r0, [pc, #248]	; (8002b7c <main+0x118>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a90:	9200      	str	r2, [sp, #0]
 8002a92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	9401      	str	r4, [sp, #4]
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa0:	f002 0201 	and.w	r2, r2, #1
 8002aa4:	9201      	str	r2, [sp, #4]
 8002aa6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa8:	9402      	str	r4, [sp, #8]
 8002aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aac:	f042 0202 	orr.w	r2, r2, #2
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	f002 0202 	and.w	r2, r2, #2
 8002ab8:	9202      	str	r2, [sp, #8]
 8002aba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abc:	9403      	str	r4, [sp, #12]
 8002abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac0:	f042 0208 	orr.w	r2, r2, #8
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002acc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ace:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002ad0:	f24f 0110 	movw	r1, #61456	; 0xf010
  GPIO_InitStruct.Pin = B1_Pin;
 8002ad4:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002ad8:	f7fd fe62 	bl	80007a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <main+0x11c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ade:	4829      	ldr	r0, [pc, #164]	; (8002b84 <main+0x120>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002ae0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ae2:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ae4:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ae8:	f7fd fd7a 	bl	80005e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002aec:	2304      	movs	r3, #4
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002aee:	a90d      	add	r1, sp, #52	; 0x34
 8002af0:	4825      	ldr	r0, [pc, #148]	; (8002b88 <main+0x124>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002af2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002af8:	f7fd fd72 	bl	80005e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b00:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002b06:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b08:	2305      	movs	r3, #5
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	481f      	ldr	r0, [pc, #124]	; (8002b88 <main+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b0c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f7fd fd65 	bl	80005e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002b16:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b1a:	a90d      	add	r1, sp, #52	; 0x34
 8002b1c:	4817      	ldr	r0, [pc, #92]	; (8002b7c <main+0x118>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002b1e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b20:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b26:	f7fd fd5b 	bl	80005e0 <HAL_GPIO_Init>
  osKernelInitialize(); // Initialize CMSIS-RTOS
 8002b2a:	f7fe fa1d 	bl	8000f68 <osKernelInitialize>
  const osThreadAttr_t Task1_attributes = {
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	4621      	mov	r1, r4
 8002b32:	a804      	add	r0, sp, #16
 8002b34:	f000 f913 	bl	8002d5e <memset>
 8002b38:	2680      	movs	r6, #128	; 0x80
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <main+0x128>)
  Task1Handle = osThreadNew(R_Task1, NULL, &Task1_attributes);
 8002b3c:	4814      	ldr	r0, [pc, #80]	; (8002b90 <main+0x12c>)
  const osThreadAttr_t Task1_attributes = {
 8002b3e:	9304      	str	r3, [sp, #16]
 8002b40:	2509      	movs	r5, #9
  Task1Handle = osThreadNew(R_Task1, NULL, &Task1_attributes);
 8002b42:	aa04      	add	r2, sp, #16
 8002b44:	4621      	mov	r1, r4
  const osThreadAttr_t Task1_attributes = {
 8002b46:	9609      	str	r6, [sp, #36]	; 0x24
 8002b48:	950a      	str	r5, [sp, #40]	; 0x28
  Task1Handle = osThreadNew(R_Task1, NULL, &Task1_attributes);
 8002b4a:	f7fe fa49 	bl	8000fe0 <osThreadNew>
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <main+0x130>)
  const osThreadAttr_t Task2_attributes = {
 8002b50:	2224      	movs	r2, #36	; 0x24
  Task1Handle = osThreadNew(R_Task1, NULL, &Task1_attributes);
 8002b52:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t Task2_attributes = {
 8002b54:	4621      	mov	r1, r4
 8002b56:	a80d      	add	r0, sp, #52	; 0x34
 8002b58:	f000 f901 	bl	8002d5e <memset>
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <main+0x134>)
  Task2Handle = osThreadNew(R_Task2, NULL, &Task2_attributes);
 8002b5e:	480f      	ldr	r0, [pc, #60]	; (8002b9c <main+0x138>)
  const osThreadAttr_t Task2_attributes = {
 8002b60:	930d      	str	r3, [sp, #52]	; 0x34
  Task2Handle = osThreadNew(R_Task2, NULL, &Task2_attributes);
 8002b62:	aa0d      	add	r2, sp, #52	; 0x34
 8002b64:	4621      	mov	r1, r4
  const osThreadAttr_t Task2_attributes = {
 8002b66:	9612      	str	r6, [sp, #72]	; 0x48
 8002b68:	9513      	str	r5, [sp, #76]	; 0x4c
  Task2Handle = osThreadNew(R_Task2, NULL, &Task2_attributes);
 8002b6a:	f7fe fa39 	bl	8000fe0 <osThreadNew>
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <main+0x13c>)
 8002b70:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002b72:	f7fe fa15 	bl	8000fa0 <osKernelStart>
 8002b76:	e7fe      	b.n	8002b76 <main+0x112>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	10120000 	.word	0x10120000
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	08002d9a 	.word	0x08002d9a
 8002b90:	08002995 	.word	0x08002995
 8002b94:	20004934 	.word	0x20004934
 8002b98:	08002da0 	.word	0x08002da0
 8002b9c:	080029b1 	.word	0x080029b1
 8002ba0:	20004938 	.word	0x20004938

08002ba4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002ba4:	6802      	ldr	r2, [r0, #0]
 8002ba6:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002bac:	f7fd bcb2 	b.w	8000514 <HAL_IncTick>
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40001400 	.word	0x40001400

08002bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_MspInit+0x40>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	9200      	str	r2, [sp, #0]
 8002bc0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002bc2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002bc6:	6459      	str	r1, [r3, #68]	; 0x44
 8002bc8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002bca:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002bce:	9100      	str	r1, [sp, #0]
 8002bd0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	9201      	str	r2, [sp, #4]
 8002bd4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bd6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002bda:	6419      	str	r1, [r3, #64]	; 0x40
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002be4:	210f      	movs	r1, #15
 8002be6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bec:	f7fd fcb6 	bl	800055c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf0:	b003      	add	sp, #12
 8002bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800

08002bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8002bfe:	4601      	mov	r1, r0
{
 8002c00:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8002c02:	2200      	movs	r2, #0
 8002c04:	2037      	movs	r0, #55	; 0x37
 8002c06:	f7fd fca9 	bl	800055c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8002c0a:	2037      	movs	r0, #55	; 0x37
 8002c0c:	f7fd fcda 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002c10:	2500      	movs	r5, #0
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_InitTick+0x6c>)
 8002c14:	9502      	str	r5, [sp, #8]
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002c18:	4c14      	ldr	r4, [pc, #80]	; (8002c6c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c28:	a901      	add	r1, sp, #4
 8002c2a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002c2c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c2e:	f7fe f843 	bl	8000cb8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c32:	f7fe f831 	bl	8000c98 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_InitTick+0x74>)
 8002c38:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002c3a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002c3e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c40:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_InitTick+0x78>)
 8002c44:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c48:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
 8002c4a:	6060      	str	r0, [r4, #4]
  htim7.Init.ClockDivision = 0;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002c4c:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8002c4e:	6125      	str	r5, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c50:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002c52:	f7fe f96d 	bl	8000f30 <HAL_TIM_Base_Init>
 8002c56:	b920      	cbnz	r0, 8002c62 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7fe f84c 	bl	8000cf6 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002c5e:	b009      	add	sp, #36	; 0x24
 8002c60:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	e7fb      	b.n	8002c5e <HAL_InitTick+0x62>
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	2000493c 	.word	0x2000493c
 8002c70:	40001400 	.word	0x40001400
 8002c74:	000f4240 	.word	0x000f4240

08002c78 <NMI_Handler>:
 8002c78:	4770      	bx	lr

08002c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7a:	e7fe      	b.n	8002c7a <HardFault_Handler>

08002c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	e7fe      	b.n	8002c80 <UsageFault_Handler>

08002c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c82:	4770      	bx	lr

08002c84 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c84:	4801      	ldr	r0, [pc, #4]	; (8002c8c <TIM7_IRQHandler+0x8>)
 8002c86:	f7fe b84a 	b.w	8000d1e <HAL_TIM_IRQHandler>
 8002c8a:	bf00      	nop
 8002c8c:	2000493c 	.word	0x2000493c

08002c90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SystemInit+0x18>)
 8002c92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c96:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cb2:	e003      	b.n	8002cbc <LoopCopyDataInit>

08002cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cba:	3104      	adds	r1, #4

08002cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cbc:	480b      	ldr	r0, [pc, #44]	; (8002cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cc4:	d3f6      	bcc.n	8002cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cc8:	e002      	b.n	8002cd0 <LoopFillZerobss>

08002cca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ccc:	f842 3b04 	str.w	r3, [r2], #4

08002cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cd4:	d3f9      	bcc.n	8002cca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cd6:	f7ff ffdb 	bl	8002c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cda:	f000 f811 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cde:	f7ff fec1 	bl	8002a64 <main>
  bx  lr    
 8002ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ce4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ce8:	08002dd0 	.word	0x08002dd0
  ldr  r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cf0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002cf4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002cf8:	2000497c 	.word	0x2000497c

08002cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC_IRQHandler>
	...

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4e0d      	ldr	r6, [pc, #52]	; (8002d38 <__libc_init_array+0x38>)
 8002d04:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d06:	1ba4      	subs	r4, r4, r6
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	42a5      	cmp	r5, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	4e0b      	ldr	r6, [pc, #44]	; (8002d40 <__libc_init_array+0x40>)
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__libc_init_array+0x44>)
 8002d14:	f000 f82c 	bl	8002d70 <_init>
 8002d18:	1ba4      	subs	r4, r4, r6
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	2500      	movs	r5, #0
 8002d1e:	42a5      	cmp	r5, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d28:	4798      	blx	r3
 8002d2a:	3501      	adds	r5, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d32:	4798      	blx	r3
 8002d34:	3501      	adds	r5, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002dc8 	.word	0x08002dc8
 8002d3c:	08002dc8 	.word	0x08002dc8
 8002d40:	08002dc8 	.word	0x08002dc8
 8002d44:	08002dcc 	.word	0x08002dcc

08002d48 <memcpy>:
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	1e43      	subs	r3, r0, #1
 8002d4c:	440a      	add	r2, r1
 8002d4e:	4291      	cmp	r1, r2
 8002d50:	d100      	bne.n	8002d54 <memcpy+0xc>
 8002d52:	bd10      	pop	{r4, pc}
 8002d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d5c:	e7f7      	b.n	8002d4e <memcpy+0x6>

08002d5e <memset>:
 8002d5e:	4402      	add	r2, r0
 8002d60:	4603      	mov	r3, r0
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d100      	bne.n	8002d68 <memset+0xa>
 8002d66:	4770      	bx	lr
 8002d68:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6c:	e7f9      	b.n	8002d62 <memset+0x4>
	...

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
